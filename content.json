{"meta":{"title":"zyzisyz","subtitle":"zyziszy blog","description":"","author":"Yang Zhang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"books","date":"2020-06-17T13:59:12.706Z","updated":"2020-06-16T13:42:21.568Z","comments":true,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":".total{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:center;justify-content:center;-ms-flex-align:start;align-items:flex-start;-ms-flex-line-pack:start;align-content:flex-start;width:100%}.item{position:relative;width:270px;height:150px;margin:0 10px 20px;box-shadow:0 12px 15px 0 rgba(0,0,0,.19),0 17px 50px 0 rgba(0,0,0,.12)}.item img:not(.LGallerySlider-Slide){width:100%;height:100%;transition:all .5s}.item span{position:absolute;bottom:0;left:0;padding:1px 0;display:block;width:100%;height:20px;line-height:20px;text-align:center;color:#fcfaf9;background-color:#0E0E0E80;transition:all .5s}.item:hover{box-shadow:0 12px 15px 0 transparent,0 17px 50px 0 transparent}.item:hover img:not(.LGallerySlider-Slide){opacity:1;transform:scale(.8) rotate3d(-1,1,0,-20deg);box-shadow:-10px -10px 2px .3px rgba(0,0,0,.6),-20px -20px 3px .3px rgba(0,0,0,.3),-30px -30px 4px .3px rgba(0,0,0,.1)}.item:hover span{height:75px;line-height:75px;opacity:0;z-index:-1}"},{"title":"about","date":"2020-05-27T12:53:07.000Z","updated":"2020-11-28T11:30:59.726Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Biography My name is Yang Zhang(张阳). Currently, I am a first-year CS master student at Tsinghua University, supervised by Prof. Zhiyong Wu. Before that, I got the B.Sc. degree from Beijing University of Posts and Telecommunications in 2020. I have a broad interest in Software Development and Speech&Language Processing. Education Beijing University of Posts and Telecommunications, 2016-2020 Tsinghua University, 2020-2023 (expected) Intership & Work Experience Center for Speech and Language Technologies, Tsinghua University Projects Publications Zhang, Yang , L. Li , and D. Wang . \"VAE-based regularization for deep speaker embedding.\" Interspeech 2019. Skills Vim"}],"posts":[{"title":"假设检验(hypothesis testing)","slug":"2020/201226_test","date":"2020-12-25T16:00:00.000Z","updated":"2020-12-26T05:54:49.478Z","comments":true,"path":"2020/12/26/2020/201226_test/","link":"","permalink":"http://yoursite.com/2020/12/26/2020/201226_test/","excerpt":"","text":"基本思想以“女士品茶”为例，对于该女士有没有品茶的能力，有两种假设：该女士没有品茶能力和该女士有品茶能力。在统计上这两个非空不相交参数集合称作统计假设，简称假设。通过样本对一个假设作出对与不对的判断，则称为该假设的一个检验。若检验结果否定该命题，则称拒绝这个假设，否则就接受（不拒绝）这个假设。 假设可分为两种： 参数假设检验，即已经知道数据的分布，针对总体的某个参数进行假设检验； 非参数假设检验，即数据分布未知，针对该分布进行假设检验。 假设检验的基本步骤 建立假设 选择检验统计量，给出拒绝域形式 选择显著性水平 给出拒绝域 做出判断 Step 1：建立假设主要针对参数假设检验问题 设有来自某分布族${F(x,\\theta)|\\theta\\in\\Theta}$的样本$x_1,…,x_n$，其中$\\Theta$为参数空间，设$\\Theta_0\\in\\Theta$，且$\\Theta_0\\neq\\phi$，则命题$H_0:\\theta\\in\\Theta_0$称为原假设或零假设（null hypothesis），若有另一个$\\Theta_1$（$\\Theta_1\\in\\Theta,\\Theta_1\\Theta_0=\\phi$，常见的一种情况是$\\Theta_1=\\Theta-\\Theta_0$），则命题$H_1:\\theta\\in\\Theta_1$称为$H_0$的对立假设或备择假设（alternative hypotheis），当$H_0$为简单假设，即$\\Theta_0$只含一个点时，备择假设有三种可能：$H_1’:\\theta\\neq\\theta_0$，$H_1’’:\\theta&lt;\\theta_0$，$H_1’’’:\\theta&gt;\\theta_0$。 Step 2：选择检验统计量，给出拒绝域形式根据样本计算统计量$Z$（如样本均值、标准差等，称为检验统计量），并基于某个法则既可以决定接受$H_0$还是拒绝$H_0$，具体地，当统计量在拒绝域$W$中即拒绝$H_0$，在接受域$\\overline{W}$中即接受$H_0$。由此可见，一个拒绝域$W$唯一确定一个检验法则，反之，一个检验法则也唯一确定一个拒绝域。 注：不能用一个样本（例子）证明一个命题（假设成立），但是可以用一个样本（例子）去推翻一个命题。此外，拒绝域与接受域之间有一个模糊域，即统计量恰好符合法则，通常将模糊域归为接受域，因此接受域是复杂的。 Step 3：选择显著性水平假设检验基于小概率事件，即小概率事件在一次试验中几乎不会发生，因此选择一个很小的概率值$\\alpha$，令$p(拒绝H_0|H_0为真)\\leq\\alpha$，表示$Z\\in W$是一个小概率事件，在一次试验中不应该发生。如果通过样本得到的统计量$z\\in W$，即不该发生的小概率事件竟然发生了，那么应该拒绝$H_0$。 由于向本是随机的，通常做检验时可能做出错误判断，由此引入了两个错误，分别为第一类错误和第二类错误，如下表所示： 观测数据情况 总体情况 总体情况 $H_0$为真 $H_1$为真 接受$H_0$ 第一类错误（拒真） 正确 拒绝$H_0$ 正确 犯第二类错误（取伪） 犯第一类错误概率：$\\alpha=P(X\\in W|H_0)$，即$\\alpha=P(拒绝H_0|H_0为真)$； 犯第二类错误概率：$\\beta=P(X\\in \\overline{W}|H_1)$，即$\\beta=P(接受H_0|H_0为假)$。 可以证明的，在一定样本量下，两类错误概率无法共同减小，但是当样本增加时，可以同时减小。 证明该问题需要引入是函数，下面将简单介绍势函数，但不对上述结论证明。定义：设检验问题$H_0:\\theta\\in\\Theta_0\\quad vs\\quad H_1:\\theta \\in \\Theta_1$的拒绝域为$W$，则样本观测值$\\mathbf{X}$落在拒绝域$W$内的概率称为该检验的势函数，记为 $$g(\\theta)=P_\\theta(\\mathbf{X}\\in W),\\ \\theta\\in\\Theta=\\Theta_0\\cup\\Theta_1$$ $$g(\\theta) = \\alpha(\\theta) ,\\ \\theta\\in\\Theta_0$$ $$g(\\theta) = 1-\\beta(\\theta) ,\\ \\theta\\in\\Theta_1$$ 第一类错误概率$\\alpha$即为初始设定的很小的概率，称为置信水平，称该检验时显著性水平为$\\alpha$的显著性检验，简称水平为$\\alpha$的检验。为了尽量减少两类错误，可简单的将其简化为减小第一类错误概率（第二类错误概率难求）。常用的$\\alpha=0.05$有时也选择0.1或0.01。 Step 4：给出拒绝域为了使得第一类错误的概率尽可能小，给定一个较小的$\\alpha$，并选择一个数$k$，设定若$Z\\geq k$拒绝$H_0$，使得$P(u=|\\frac{z-\\mu}{\\sigma/\\sqrt{n}}|\\geq k)\\leq \\alpha$，所以$k=u_{\\alpha/2}$。 注：算拒绝域时，需基于标准正态分布。 Step 5：做出判断通过样本计算统计量，若统计量在拒绝域中，则拒绝原假设，否则接受原假设。 检验的 $p$ 值不同置信水平$\\alpha$的取值，可能会存在不同的结果。因此引入新的指标，即利用样本观测值能够作出拒绝原假设的最小显著水平，称为检验的$p$值。由检验的$p$值与心目中的显著性水平$\\alpha$进行比较，可以容易做出检验结论： 若$\\alpha\\geq p$，则在显著性水平$\\alpha$下拒绝$H_0$； 若$\\alpha&lt;p$，则在显著性水平$\\alpha$下接受$H_0$. 注：一般以$p&lt;0.05$ 为有统计学差异， $p&lt;0.01$ 为有显著统计学差异，$p&lt;0.001$为有极其显著的统计学差异。","categories":[{"name":"统计","slug":"统计","permalink":"http://yoursite.com/categories/%E7%BB%9F%E8%AE%A1/"}],"tags":[{"name":"统计","slug":"统计","permalink":"http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1/"}]},{"title":"Git Flight Rules","slug":"2020/201128_git_fight_rules","date":"2020-11-27T16:00:00.000Z","updated":"2020-12-09T04:59:13.045Z","comments":true,"path":"2020/11/28/2020/201128_git_fight_rules/","link":"","permalink":"http://yoursite.com/2020/11/28/2020/201128_git_fight_rules/","excerpt":"","text":"Git飞行规则(Flight Rules)前言 英文原版README 翻译可能存在错误或不标准的地方，欢迎大家指正和修改，谢谢！ 什么是”飞行规则”?这是一篇给宇航员（这里就是指使用Git的程序员们）的指南，用来指导问题出现后的应对之法。 飞行规则(Flight Rules) 是记录在手册上的来之不易的一系列知识，记录了某个事情发生的原因，以及怎样一步一步的进行处理。本质上, 它们是特定场景的非常详细的标准处理流程。 […] 自20世纪60年代初以来，NASA一直在捕捉(capturing)我们的失误，灾难和解决方案, 当时水星时代(Mercury-era)的地面小组首先开始将“经验教训”收集到一个纲要(compendium)中，该纲现在已经有上千个问题情景，从发动机故障到破损的舱口把手到计算机故障，以及它们对应的解决方案。 &mdash; Chris Hadfield, 一个宇航员的生活指南(An Astronaut’s Guide to Life)。 这篇文章的约定为了清楚的表述，这篇文档里的所有例子使用了自定义的bash 提示，以便指示当前分支和是否有暂存的变化(changes)。分支名用小括号括起来，分支名后面跟的*表示暂存的变化(changes)。 Table of Contents generated with DocToc 编辑提交(editting commits) 我刚才提交了什么? 我的提交信息(commit message)写错了 我提交(commit)里的用户名和邮箱不对 我想从一个提交(commit)里移除一个文件 我想删除我的的最后一次提交(commit) 删除任意提交(commit) 我尝试推一个修正后的提交(amended commit)到远程，但是报错： 我意外的做了一次硬重置(hard reset)，我想找回我的内容 暂存(Staging) 我需要把暂存的内容添加到上一次的提交(commit) 我想要暂存一个新文件的一部分，而不是这个文件的全部 我想把在一个文件里的变化(changes)加到两个提交(commit)里 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来 未暂存(Unstaged)的内容 我想把未暂存的内容移动到一个新分支 我想把未暂存的内容移动到另一个已存在的分支 我想丢弃本地未提交的变化(uncommitted changes) 我想丢弃某些未暂存的内容 分支(Branches) 我从错误的分支拉取了内容，或把内容拉取到了错误的分支 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致 我需要提交到一个新分支，但错误的提交到了master 我想保留来自另外一个ref-ish的整个文件 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里 我想删除上游(upstream)分支被删除了的本地分支 我不小心删除了我的分支 我想删除一个分支 我想从别人正在工作的远程分支签出(checkout)一个分支 Rebasing 和合并(Merging) 我想撤销rebase/merge 我已经rebase过, 但是我不想强推(force push) 我需要组合(combine)几个提交(commit) 安全合并(merging)策略 我需要将一个分支合并成一个提交(commit) 我只想组合(combine)未推的提交(unpushed commit) 检查是否分支上的所有提交(commit)都合并(merge)过了 交互式rebase(interactive rebase)可能出现的问题 这个rebase 编辑屏幕出现’noop’ 有冲突的情况 Stash 暂存所有改动 暂存指定文件 暂存时记录消息 使用某个指定暂存 暂存时保留未暂存的内容 杂项(Miscellaneous Objects) 克隆所有子模块 删除标签(tag) 恢复已删除标签(tag) 已删除补丁(patch) 跟踪文件(Tracking Files) 我只想改变一个文件名字的大小写，而不修改内容 我想从Git删除一个文件，但保留该文件 配置(Configuration) 我想给一些Git命令添加别名(alias) 我想缓存一个仓库(repository)的用户名和密码 我不知道我做错了些什么 其它资源(Other Resources) 书(Books) 教程(Tutorials) 脚本和工具(Scripts and Tools) GUI客户端(GUI Clients) 编辑提交(editting commits) 我刚才提交了什么?如果你用 git commit -a 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前HEAD上的最近一次的提交(commit): (master)$ git show 或者 $ git log -n1 -p 我的提交信息(commit message)写错了如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message): $ git commit --amend --only 这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成: $ git commit --amend --only -m 'xxxxxxx' 如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。 我提交(commit)里的用户名和邮箱不对如果这只是单个提交(commit)，修改它： $ git commit --amend --author \"New Authorname &lt;authoremail@mydomain.com&gt;\" 如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页. 我想从一个提交(commit)里移除一个文件通过下面的方法，从一个提交(commit)里移除一个文件: $ git checkout HEAD^ myfile $ git add -A $ git commit --amend 这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。 我想删除我的的最后一次提交(commit)如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。 $ git reset HEAD^ --hard $ git push -f [remote] [branch] 如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化): (my-branch*)$ git reset --soft HEAD@&#123;1&#125; 这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 git revert SHAofBadCommit， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是rebase-safe的 (例如： 其它开发者不会从这个分支拉), 只需要使用 git push -f； 更多, 请参考 the above section。 删除任意提交(commit)同样的警告：不到万不得已的时候不要这么做. $ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT $ git push -f [remote] [branch] 或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。 我尝试推一个修正后的提交(amended commit)到远程，但是报错：To https://github.com/yourusername/repo.git ! [rejected] mybranch -&gt; mybranch (non-fast-forward) error: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (-f)。 注意 &ndash; 总是 确保你指明一个分支! (my-branch)$ git push origin mybranch -f 一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。 我意外的做了一次硬重置(hard reset)，我想找回我的内容如果你意外的做了 git reset --hard, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。 (master)$ git reflog 你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的SHA，再重置一次: (master)$ git reset --hard SHA1234 这样就完成了。 暂存(Staging) 我需要把暂存的内容添加到上一次的提交(commit)(my-branch*)$ git commit --amend 我想要暂存一个新文件的一部分，而不是这个文件的全部一般来说, 如果你想暂存一个文件的一部分, 你可这样做: $ git add --patch filename.x -p 简写。这会打开交互模式， 你将能够用 s 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做: $ git add -N filename.x 然后, 你需要用 e 选项来手动选择需要添加的行，执行 git diff --cached 将会显示哪些行暂存了哪些行只是保存在本地了。 我想把在一个文件里的变化(changes)加到两个提交(commit)里git add 会把整个文件加入到一个提交. git add -p 允许交互式的选择你想要提交的部分. 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。 $ git commit -m \"WIP\" $ git add . $ git stash $ git reset HEAD^ $ git stash pop --index 0 注意1: 这里使用pop仅仅是因为想尽可能保持幂等。注意2: 假如你不加上--index你会把暂存的文件标记为为存储.这个链接 解释得比较清楚。（不过是英文的，其大意是说，这是一个较为底层的问题，stash时会做2个commit，其中一个会记录index状态，staged的文件等东西，另一个记录worktree和其他的一些东西，如果你不在apply时加index，git会把两个一起销毁，所以staged里就空了）。 未暂存(Unstaged)的内容 我想把未暂存的内容移动到一个新分支$ git checkout -b my-branch 我想把未暂存的内容移动到另一个已存在的分支$ git stash $ git checkout my-branch $ git stash pop 我想丢弃本地未提交的变化(uncommitted changes)如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以： # one commit (my-branch)$ git reset --hard HEAD^ # two commits (my-branch)$ git reset --hard HEAD^^ # four commits (my-branch)$ git reset --hard HEAD~4 # or (master)$ git checkout -f 重置某个特殊的文件, 你可以用文件名做为参数: $ git reset filename 我想丢弃某些未暂存的内容如果你想丢弃工作拷贝中的一部分内容，而不是全部。 签出(checkout)不需要的内容，保留需要的。 $ git checkout -p # Answer y to all of the snippets you want to drop 另外一个方法是使用 stash， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。 $ git stash -p # Select all of the snippets you want to save $ git reset --hard $ git stash pop 或者, stash 你不需要的部分, 然后stash drop。 $ git stash -p # Select all of the snippets you don't want to save $ git stash drop 分支(Branches) 我从错误的分支拉取了内容，或把内容拉取到了错误的分支这是另外一种使用 git reflog 情况，找到在这次错误拉(pull) 之前HEAD的指向。 (master)$ git reflog ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here 重置分支到你所需的提交(desired commit): $ git reset --hard c5bc55a 完成。 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致先确认你没有推(push)你的内容到远程。 git status 会显示你领先(ahead)源(origin)多少个提交: (my-branch)$ git status # On branch my-branch # Your branch is ahead of 'origin/my-branch' by 2 commits. # (use \"git push\" to publish your local commits) # 一种方法是: (master)$ git reset --hard origin/my-branch 我需要提交到一个新分支，但错误的提交到了master在master下创建一个新分支，不切换到新分支,仍在master下: (master)$ git branch my-branch 把master分支重置到前一个提交: (master)$ git reset --hard HEAD^ HEAD^ 是 HEAD^1 的简写，你可以通过指定要设置的HEAD来进一步重置。 或者, 如果你不想使用 HEAD^, 找到你想重置到的提交(commit)的hash(git log 能够完成)， 然后重置到这个hash。 使用git push 同步内容到远程。 例如, master分支想重置到的提交的hash为a13b85e: (master)$ git reset --hard a13b85e HEAD is now at a13b85e 签出(checkout)刚才新建的分支继续工作: (master)$ git checkout my-branch 我想保留来自另外一个ref-ish的整个文件假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容: (solution)$ git add -A &amp;&amp; git commit -m \"Adding all changes from this spike into one big commit.\" 当你想要把它放到一个分支里 (可能是feature, 或者 develop), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。 假设你有: 分支 solution, 拥有原型方案， 领先 develop 分支。 分支 develop, 在这里你应用原型方案的一些内容。 我去可以通过把内容拿到你的分支里，来解决这个问题: (develop)$ git checkout solution -- file1.txt 这会把这个文件内容从分支 solution 拿到分支 develop 里来: # On branch develop # Your branch is up-to-date with 'origin/develop'. # Changes to be committed: # (use \"git reset HEAD &lt;file&gt;...\" to unstage) # # modified: file1.txt 然后, 正常提交。 Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ Wikipedia. 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里假设你有一个master分支， 执行git log, 你看到你做过两次提交: (master)$ git log commit e3851e817c451cc36f2e6f3049db528415e3c114 Author: Alex Lee &lt;alexlee@example.com&gt; Date: Tue Jul 22 15:39:27 2014 -0400 Bug #21 - Added CSRF protection commit 5ea51731d150f7ddc4a365437931cd8be3bf3131 Author: Alex Lee &lt;alexlee@example.com&gt; Date: Tue Jul 22 15:39:12 2014 -0400 Bug #14 - Fixed spacing on title commit a13b85e984171c6e2a1729bb061994525f626d14 Author: Aki Rose &lt;akirose@example.com&gt; Date: Tue Jul 21 01:12:48 2014 -0400 First commit 让我们用提交hash(commit hash)标记bug (e3851e8 for #21, 5ea5173 for #14). 首先, 我们把master分支重置到正确的提交(a13b85e): (master)$ git reset --hard a13b85e HEAD is now at a13b85e 现在, 我们对 bug #21 创建一个新的分支: (master)$ git checkout -b 21 (21)$ 接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。 (21)$ git cherry-pick e3851e8 这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突. 再者， 我们为bug #14 创建一个新的分支, 也基于master分支 (21)$ git checkout master (master)$ git checkout -b 14 (14)$ 最后, 为 bug #14 执行 cherry-pick: (14)$ git cherry-pick 5ea5173 我想删除上游(upstream)分支被删除了的本地分支一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。 $ git fetch -p 我不小心删除了我的分支如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件: (master)$ git checkout -b my-branch (my-branch)$ git branch (my-branch)$ touch foo.txt (my-branch)$ ls README.md foo.txt 添加文件并做一次提交 (my-branch)$ git add . (my-branch)$ git commit -m 'foo.txt added' (my-branch)$ foo.txt added 1 files changed, 1 insertions(+) create mode 100644 foo.txt (my-branch)$ git log commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012 Author: siemiatj &lt;siemiatj@example.com&gt; Date: Wed Jul 30 00:34:10 2014 +0200 foo.txt added commit 69204cdf0acbab201619d95ad8295928e7f411d5 Author: Kate Hudson &lt;katehudson@example.com&gt; Date: Tue Jul 29 13:14:46 2014 -0400 Fixes #6: Force pushing after amending commits 现在我们切回到主(master)分支，‘不小心的’删除my-branch分支 (my-branch)$ git checkout master Switched to branch 'master' Your branch is up-to-date with 'origin/master'. (master)$ git branch -D my-branch Deleted branch my-branch (was 4e3cd85). (master)$ echo oh noes, deleted my branch! oh noes, deleted my branch! 在这时候你应该想起了reflog, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。 (master)$ git reflog 69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to master 4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added 69204cd HEAD@&#123;2&#125;: checkout: moving from master to my-branch 正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。 (master)$ git checkout -b my-branch-help Switched to a new branch 'my-branch-help' (my-branch-help)$ git reset --hard 4e3cd85 HEAD is now at 4e3cd85 foo.txt added (my-branch-help)$ ls README.md foo.txt 看! 我们把删除的文件找回来了。 Git的 reflog 在rebasing出错的时候也是同样有用的。 我想删除一个分支删除一个远程分支: (master)$ git push origin --delete my-branch 你也可以: (master)$ git push origin :my-branch 删除一个本地分支: (master)$ git branch -D my-branch 我想从别人正在工作的远程分支签出(checkout)一个分支首先, 从远程拉取(fetch) 所有分支: (master)$ git fetch --all 假设你想要从远程的daves分支签出到本地的daves (master)$ git checkout --track origin/daves Branch daves set up to track remote branch daves from origin. Switched to a new branch 'daves' (--track 是 git checkout -b [branch] [remotename]/[branch] 的简写) 这样就得到了一个daves分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到. Rebasing 和合并(Merging) 我想撤销rebase/merge你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。 Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。 (my-branch)$ git reset --hard ORIG_HEAD 我已经rebase过, 但是我不想强推(force push)不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做: (master)$ git checkout my-branch (my-branch)$ git rebase -i master (my-branch)$ git checkout master (master)$ git merge --ff-only my-branch 更多, 参见 this SO thread. 我需要组合(combine)几个提交(commit)假设你的工作分支将会做对于 master 的pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后: (my-branch)$ git reset --soft master (my-branch)$ git commit -am \"New awesome feature\" 如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase): (my-branch)$ git rebase -i master 如果没有相对的其它分支， 你将不得不相对自己的HEAD 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于HEAD~2 进行rebase， 组合最近3次提交(commit), 相对于HEAD~3, 等等。 (master)$ git rebase -i HEAD~2 在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容: pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature pick b729ad5 fixup pick e3851e8 another fix # Rebase 8074d12..b729ad5 onto 8074d12 # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \"squash\", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out 所有以 # 开头的行都是注释, 不会影响 rebase. 然后，你可以用任何上面命令列表的命令替换 pick, 你也可以通过删除对应的行来删除一个提交(commit)。 例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 f: pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature f b729ad5 fixup f e3851e8 another fix 如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个r，或者更简单的用s 替代 f: pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature s b729ad5 fixup s e3851e8 another fix 你可以在接下来弹出的文本提示框里重命名提交(commit)。 Newer, awesomer features # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # rebase in progress; onto 8074d12 # You are currently editing a commit while rebasing branch 'master' on '8074d12'. # # Changes to be committed: # modified: README.md # 如果成功了, 你应该看到类似下面的内容: (master)$ Successfully rebased and updated refs/heads/master. 安全合并(merging)策略--no-commit 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 no-ff 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。 (master)$ git merge --no-ff --no-commit my-branch 我需要将一个分支合并成一个提交(commit)(master)$ git merge --squash my-branch 我只想组合(combine)未推的提交(unpushed commit)有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。 (master)$ git rebase -i @&#123;u&#125; 这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。 检查是否分支上的所有提交(commit)都合并(merge)过了检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff: (master)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll 这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是: (master)$ git log master ^feature/120-on-scroll --no-merges 交互式rebase(interactive rebase)可能出现的问题 这个rebase 编辑屏幕出现’noop’如果你看到的是这样: noop 这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。 你可以尝试: 检查确保主(master)分支没有问题 rebase HEAD~2 或者更早 有冲突的情况如果你不能成功的完成rebase, 你可能必须要解决冲突。 首先执行 git status 找出哪些文件有冲突: (my-branch)$ git status On branch my-branch Changes not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: README.md 在这个例子里面, README.md 有冲突。 打开这个文件找到类似下面的内容: &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD some code ========= some code &gt;&gt;&gt;&gt;&gt;&gt;&gt; new-commit 你需要解决新提交的代码(示例里, 从中间==线到new-commit的地方)与HEAD 之间不一样的地方. 有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor): (master*)$ git mergetool -t opendiff 在你解决完所有冲突和测试过后, git add 变化了的(changed)文件, 然后用git rebase --continue 继续rebase。 (my-branch)$ git add README.md (my-branch)$ git rebase --continue 如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行git rebase --skip。 任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做: (my-branch)$ git rebase --abort Stash暂存所有改动暂存你工作目录下的所有改动 $ git stash 你可以使用-u来排除一些文件 $ git stash -u 暂存指定文件假设你只想暂存某一个文件 $ git stash push working-directory-path/filename.ext 假设你想暂存多个文件 $ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext 暂存时记录消息这样你可以在list时看到它 $ git stash save &lt;message&gt; 或 $ git stash push -m &lt;message&gt; 使用某个指定暂存首先你可以查看你的stash记录 $ git stash list 然后你可以apply某个stash $ git stash apply \"stash@&#123;n&#125;\" 此处， ‘n’是stash在栈中的位置，最上层的stash会是0 除此之外，也可以使用时间标记(假如你能记得的话)。 $ git stash apply \"stash@&#123;2.hours.ago&#125;\" 暂存时保留未暂存的内容你需要手动create一个stash commit， 然后使用git stash store。 $ git stash create $ git stash store -m \"commit-message\" CREATED_SHA1 杂项(Miscellaneous Objects) 克隆所有子模块$ git clone --recursive git://github.com/foo/bar.git 如果已经克隆了: $ git submodule update --init --recursive 删除标签(tag)$ git tag -d &lt;tag_name&gt; $ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt; 恢复已删除标签(tag)如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag): $ git fsck --unreachable | grep tag 记下这个标签(tag)的hash，然后用Git的 update-ref: $ git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt; 这时你的标签(tag)应该已经恢复了。 已删除补丁(patch)如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 git am。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。 做完提交后, 再修改作者，参见变更作者。 然后, 应用变化, 再发起一个新的pull request。 跟踪文件(Tracking Files) 我只想改变一个文件名字的大小写，而不修改内容(master)$ git mv --force myfile MyFile 我想从Git删除一个文件，但保留该文件(master)$ git rm --cached log.txt 配置(Configuration) 我想给一些Git命令添加别名(alias)在 OS X 和 Linux 下, 你的 Git的配置文件储存在 ~/.gitconfig。我在[alias] 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下: [alias] a = add amend = commit --amend c = commit ca = commit --amend ci = commit -a co = checkout d = diff dc = diff --changed ds = diff --staged f = fetch loll = log --graph --decorate --pretty=oneline --abbrev-commit m = merge one = log --pretty=oneline outstanding = rebase -i @&#123;u&#125; s = status unpushed = log @&#123;u&#125; wc = whatchanged wip = rebase -i @&#123;u&#125; zap = fetch -p 我想缓存一个仓库(repository)的用户名和密码你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。 $ git config --global credential.helper cache # Set git to use the credential memory cache $ git config --global credential.helper 'cache --timeout=3600' # Set the cache to timeout after 1 hour (setting is in seconds) 我不知道我做错了些什么你把事情搞砸了：你 重置(reset) 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。 这就是 git reflog 的目的， reflog 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到reflog。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。 (master)$ git reflog 0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2 0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2 上面的reflog展示了从master分支签出(checkout)到2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 HEAD@{0}标识. 如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前master上指向的提交(0254ea7)。 $ git reset --hard 0254ea7 然后使用git reset就可以把master改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。 (摘自). 其它资源(Other Resources)书(Books) Pro Git - Scott Chacon’s excellent git book Git Internals - Scott Chacon’s other excellent git book 教程(Tutorials) Learn Git branching 一个基于网页的交互式 branching/merging/rebasing 教程 Getting solid at Git rebase vs. merge git-workflow - Aaron Meurer的怎么使用Git为开源仓库贡献 GitHub as a workflow - 使用GitHub做为工作流的趣事, 尤其是空PRs 脚本和工具(Scripts and Tools) firstaidgit.io 一个可搜索的最常被问到的Git的问题 git-extra-commands - 一堆有用的额外的Git脚本 git-extras - GIT 工具集 – repo summary, repl, changelog population, author commit percentages and more git-fire - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。 git-tips - Git小提示 git-town - 通用，高级Git工作流支持！ http://www.git-town.com GUI客户端(GUI Clients) GitKraken - 豪华的Git客户端 Windows, Mac &amp; Linux git-cola - 另外一个Git客户端 Windows &amp; OS X GitUp - 一个新的Git客户端，在处理Git的复杂性上有自己的特点 gitx-dev - 图形化的Git客户端 OS X Source Tree - 免费的图形化Git客户端 Windows &amp; OS X Tower - 图形化Git客户端 OS X(付费)","categories":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"NLP Tasks and PyTorch Data Parallel Modes","slug":"2020/201122_useful_tips","date":"2020-11-21T16:00:00.000Z","updated":"2020-12-09T04:59:19.147Z","comments":true,"path":"2020/11/22/2020/201122_useful_tips/","link":"","permalink":"http://yoursite.com/2020/11/22/2020/201122_useful_tips/","excerpt":"","text":"NLP Tasks Sentiment analysis: is a text positive or negative? Text generation (in English): provide a prompt and the model will generate what follows. Name entity recognition (NER): in an input sentence, label each word with the entity it represents (person, place, etc.) Question answering: provide the model with some context and a question, extract the answer from the context. Filling masked text: given a text with masked words (e.g., replaced by [MASK]), fill the blanks. Summarization: generate a summary of a long text. Translation: translate a text in another language. Feature extraction: return a tensor representation of the text. PyTorch Data Parallel Modes Data Parallel (accelerator=’dp’) (multiple-gpus, 1 machine) DistributedDataParallel (accelerator=’ddp’) (multiple-gpus across many machines (python script based)). DistributedDataParallel (accelerator=’ddp_spawn’) (multiple-gpus across many machines (spawn based)). DistributedDataParallel 2 (accelerator=’ddp2’) (DP in a machine, DDP across machines). Horovod (accelerator=’horovod’) (multi-machine, multi-gpu, configured at runtime) TPUs (tpu_cores=8|x) (tpu or TPU pod)","categories":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/categories/Tips/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"}]},{"title":"htop","slug":"2020/201119_htop","date":"2020-11-18T16:00:00.000Z","updated":"2020-12-09T04:59:27.063Z","comments":true,"path":"2020/11/19/2020/201119_htop/","link":"","permalink":"http://yoursite.com/2020/11/19/2020/201119_htop/","excerpt":"","text":"颜色CPU 蓝色: 低优先级线程 绿色: 正常优先级线程 红色: 内核线程 Mem 绿色: 已用内存 蓝色: 缓冲区 黄色/橙色: 缓存","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"按关键词杀死进程","slug":"2020/201119_kill","date":"2020-11-18T16:00:00.000Z","updated":"2020-12-09T04:59:04.573Z","comments":true,"path":"2020/11/19/2020/201119_kill/","link":"","permalink":"http://yoursite.com/2020/11/19/2020/201119_kill/","excerpt":"","text":"killps -ef | grep firefox | awk '&#123;print $2&#125;' | xargs kill -9 ps -ef | grep &lt;key-word&gt; | awk '&#123;print $2&#125;' | xargs kill -9","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"跟我一起写 Makefile","slug":"2020/201116_makefile","date":"2020-11-15T16:00:00.000Z","updated":"2020-11-16T14:00:41.497Z","comments":true,"path":"2020/11/16/2020/201116_makefile/","link":"","permalink":"http://yoursite.com/2020/11/16/2020/201116_makefile/","excerpt":"","text":"跟我一起写 Makefile突然发现吴老师在2010年写的 makefile 教程，转载一下 概述什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。 因为，makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。 makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。 现在讲述如何写makefile的文章比较少，这是我想写这篇文章的原因。当然，不同产商的make各不相同，也有不同的语法，但其本质都是在“文件依赖性”上做文章，这里，我仅对GNU的make进行讲述，我的环境是RedHat Linux 8.0，make的版本是3.80。必竟，这个make是应用最为广泛的，也是用得最多的。而且其还是最遵循于IEEE 1003.2-1992 标准的（POSIX.2）。 在这篇文档中，将以C/C++的源码作为我们基础，所以必然涉及一些关于C/C++的编译的知识，相关于这方面的内容，还请各位查看相关的编译器的文档。这里所默认的编译器是UNIX下的GCC和CC。 关于程序的编译和链接在此，我想多说关于程序编译的一些规范和方法，一般来说，无论是C、C++、还是pas，首先要把源文件编译成中间代码文件，在Windows下也就是 .obj 文件，UNIX下是 .o 文件，即 Object File，这个动作叫做编译（compile）。然后再把大量的Object File合成执行文件，这个动作叫作链接（link）。 编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。 链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。 总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的Object File. 好，言归正传，GNU的make有许多的内容，闲言少叙，还是让我们开始吧。 Makefile 介绍make命令执行时，需要一个 Makefile 文件，以告诉make命令需要怎么样的去编译和链接程序。 首先，我们用一个示例来说明Makefile的书写规则。以便给大家一个感兴认识。这个示例来源于GNU的make使用手册，在这个示例中，我们的工程有8个C文件，和3个头文件，我们要写一个Makefile来告诉make命令如何编译和链接这几个文件。我们的规则是： 1）如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。 2）如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。 3）如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。 只要我们的Makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自己编译所需要的文件和链接目标程序。 一、Makefile的规则在讲述这个Makefile之前，还是让我们先来粗略地看一看Makefile的规则。 target ... : prerequisites ... command ... ... target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label），对于标签这种特性，在后续的“伪目标”章节中会有叙述。 prerequisites就是，要生成那个target所需要的文件或是目标。 command也就是make需要执行的命令。（任意的Shell命令） 这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。 说到底，Makefile的东西就是这样一点，好像我的这篇文档也该结束了。呵呵。还不尽然，这是Makefile的主线和核心，但要写好一个Makefile还不够，我会以后面一点一点地结合我的工作经验给你慢慢到来。内容还多着呢。：） 二、一个示例正如前面所说的，如果一个工程有3个头文件，和8个C文件，我们为了完成前面所述的那三个规则，我们的Makefile应该是下面的这个样子的。 edit : main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.c defs.h command.h cc -c command.c display.o : display.c defs.h buffer.h cc -c display.c insert.o : insert.c defs.h buffer.h cc -c insert.c search.o : search.c defs.h buffer.h cc -c search.c files.o : files.c defs.h buffer.h command.h cc -c files.c utils.o : utils.c defs.h cc -c utils.c clean : rm edit main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o 反斜杠（\\）是换行符的意思。这样比较便于Makefile的易读。我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。 在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。 在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个Tab键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。 这里要说明一点的是，clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。 三、make是如何工作的在默认的方式下，也就是我们只输入make命令。那么， make会在当前目录下找名字叫“Makefile”或“makefile”的文件。 如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。 如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。 如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程） 当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生命make的终极任务，也就是执行文件edit了。 这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性，即，如果在我找了依赖关系之后，冒号后面的文件还是不在，那么对不起，我就不工作啦。 通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——“make clean”，以此来清除所有的目标文件，以便重编译。 于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。 而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。 四、makefile中使用变量在上面的例子中，先让我们看看edit的规则： edit : main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o 我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。 比如，我们声明一个变量，叫objects, OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义： objects = main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o 于是，我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子： objects = main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o edit : $(objects) cc -o edit $(objects) main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.c defs.h command.h cc -c command.c display.o : display.c defs.h buffer.h cc -c display.c insert.o : insert.c defs.h buffer.h cc -c insert.c search.o : search.c defs.h buffer.h cc -c search.c files.o : files.c defs.h buffer.h command.h cc -c files.c utils.o : utils.c defs.h cc -c utils.c clean : rm edit $(objects) 于是如果有新的 .o 文件加入，我们只需简单地修改一下 objects 变量就可以了。 关于变量更多的话题，我会在后续给你一一道来。 五、让make自动推导GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。 只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。 objects = main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o edit : $(objects) cc -o edit $(objects) main.o : defs.h kbd.o : defs.h command.h command.o : defs.h command.h display.o : defs.h buffer.h insert.o : defs.h buffer.h search.o : defs.h buffer.h files.o : defs.h buffer.h command.h utils.o : defs.h .PHONY : clean clean : rm edit $(objects) 这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。 关于更为详细的“隐晦规则”和“伪目标文件”，我会在后续给你一一道来。 六、另类风格的makefile即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。 objects = main.o kbd.o command.o display.o \\ insert.o search.o files.o utils.o edit : $(objects) cc -o edit $(objects) $(objects) : defs.h kbd.o command.o files.o : command.h display.o insert.o search.o files.o : buffer.h .PHONY : clean clean : rm edit $(objects) 这种风格，让我们的makefile变得很简单，但我们的文件依赖关系就显得有点凌乱了。鱼和熊掌不可兼得。还看你的喜好了。我是不喜欢这种风格的，一是文件的依赖关系看不清楚，二是如果文件一多，要加入几个新的.o文件，那就理不清楚了。 七、清空目标文件的规则每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。这是一个“修养”（呵呵，还记得我的《编程修养》吗）。一般的风格都是： clean: rm edit $(objects) 更为稳健的做法是： .PHONY : clean clean : -rm edit $(objects) 前面说过，.PHONY意思表示clean是一个“伪目标”，。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。 上面就是一个makefile的概貌，也是makefile的基础，下面还有很多makefile的相关细节，准备好了吗？准备好了就来。","categories":[{"name":"toolkit","slug":"toolkit","permalink":"http://yoursite.com/categories/toolkit/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/%E6%95%88%E7%8E%87/"}]},{"title":"Neural Network Translation","slug":"2020/201105_NMT","date":"2020-11-04T16:00:00.000Z","updated":"2020-12-09T04:58:55.700Z","comments":true,"path":"2020/11/05/2020/201105_NMT/","link":"","permalink":"http://yoursite.com/2020/11/05/2020/201105_NMT/","excerpt":"","text":"NMT: Neural Machine Translation SMT: Static Machine Translation BLUE: Bilingual Evaluation Understudy WMT-14 dataset: beam-search: beam search是对贪心策略一个改进。在每一个时间步，不再只保留当前分数最高的1个输出，而是保留num_beams个。当num_beams=1时集束搜索就退化成了贪心搜索。 &lt;EOS&gt;: end-of-sentence symbol Sequence to Sequence Learning with Neural NetworksSequential Problems: Lengths are not known a-priori. Using a multilayered Long Short-Term Memory (LSTM) to map the input sequence to a vector of a fixed dimensionality, then another deep LSTM to decode the target sequence from the vector. BLUE$$BLEU = BP \\times exp(\\sum_{n=1}^{N}w_n\\log{P_n})$$ 其中 $BP$ 是惩罚因子(Brevity Penalty)，为了避免评分的偏向性，所以在结果中引入。 Recurrent Neural NetworkGiven a sequence of inputs $(x1, \\dots, x_T)$, a standard RNN computes a sequence of outputs $(y_1, \\dots , y_T)$ by iterating the following equation: $$h_t = sigm(W^{hx}x_t+W^{hh}h_{t-1})$$ $$y_t = W^{yh}h_t$$ However, it is not clear how to apply an RNN to problems whose input and the output sequences have different lengths with complicated and non-monotonic relationships. The goal of LSTM is known to learn problems with long range temporal dependencies, and estimate the conditional probability $p(y_1, \\dots, y_{T’}|x_1, \\dots, x_T)$ (length $T’$ may differ from $T$) 用了两种不同的lstm，一种是处理输入序列，一种是处理输出序列； 更深的lstm会比浅的lstm效果更好，所以论文选择了四层； 将输入的序列翻转之后作为输入效果更好一些。 Decoding and RescoringTrained the model by maximizing the log probability of a correct translation $T$ given the source sentence $S$: $$ 1/|\\mathcal{S}| \\sum_{(T,S)\\in \\mathcal{S}} \\log p(T|\\mathcal{S})$$","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"Git Tips","slug":"2020/201107_git","date":"2020-11-04T16:00:00.000Z","updated":"2020-12-09T04:59:34.300Z","comments":true,"path":"2020/11/05/2020/201107_git/","link":"","permalink":"http://yoursite.com/2020/11/05/2020/201107_git/","excerpt":"","text":"实验室wiki上静北师兄整理的，copy一下 Git 使用哲学简单来说，Git 的使用哲学和目的就是有条理地说清楚你都干了什么事，然后把它们一一存储成独立的改动。 这么做以后，如果你之前发现你做的某一件事可能是错的，你可以基于这个独立的改动创建一个分支，同时还保留其他改动。 同时，你还可以实现回滚到某个版本，应用其他同学的改动等等。但就核心而言，是练就你有条理地说清楚你都干了什么事的能力。 Git 基本使用方法创建 Git 仓库越来越多的实验代码都使用 Git 来管理和分享。对于一个已经存在的远程仓库，执行下述命令即可将其克隆到本地。 $ git clone &lt;url&gt; 对于一份没有被 Git 管理的本地代码，切换到代码所在文件夹，执行下述命令即可创建一个 Git 仓库。 $ git init 配置 SSH 密钥&lt;url&gt; 一般有两种。一种是基于 HTTP 协议的，一种是基于 Git 协议的。基于 Git 协议的可以通过密钥认证来避免输密码。 绝大多数在线的 Git 仓库托管站点都支持密钥认证，从而可以避免可能要输入的密码。 这里推荐参考 GitHub 密钥配置文档 。 创建改动当你对 Git 仓库内的文件进行修改后，你可以通过下述命令来查看目前的改动。 $ git status 你可以通过下述命令来暂存你的改动。 $ git add &lt;pattern&gt; 其中 &lt;pattern&gt; 可以是文件路径，文件夹路径，通配符等等。 如果所有文件都需要被提交，你可以使用下述命令。 $ git add .","categories":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Matrix Decomposition","slug":"2020/201104_matrix_factorization","date":"2020-11-03T16:00:00.000Z","updated":"2020-12-24T15:44:48.291Z","comments":true,"path":"2020/11/04/2020/201104_matrix_factorization/","link":"","permalink":"http://yoursite.com/2020/11/04/2020/201104_matrix_factorization/","excerpt":"","text":"Matrix Decomposition PCA: Principle Component Analysis SVD: Singular Value Decomposition LDA: Linear Discriminant Analysis NMF: Non-negative Matrix Factorization NMF: with Sparse Constraints Linear Sparse Coding Overview$$A_{n \\times m} = B_{n \\times k}C_{k \\times m}$$ $B$ captures the common features in $A$ $C$ carries specific characteristics of the original samples $n \\times m \\rightarrow (n+m) \\times k$ $ k&lt;&lt;n $ In PCA: $B$ is eigenvectors In SVD: $B$ is right (column) eigenvectors In LDA: $B$ is discriminant directions In NMF: $B$ is local features","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"Hidden Markov Model","slug":"2020/201102_hmm","date":"2020-11-01T16:00:00.000Z","updated":"2020-12-09T04:58:47.502Z","comments":true,"path":"2020/11/02/2020/201102_hmm/","link":"","permalink":"http://yoursite.com/2020/11/02/2020/201102_hmm/","excerpt":"","text":"隐马尔可夫模型（Hidden Markov Model）$$\\lambda = f(\\boldsymbol{\\pi}, \\boldsymbol{A}, \\boldsymbol{B})$$ 隐藏状态初始概率分布 $\\boldsymbol{\\pi}$ 状态转移概率矩阵 $\\boldsymbol{A}$ 观测状态概率矩阵 $\\boldsymbol{B}$ 三个基本问题1. 概率计算：已知系统输出 $\\boldsymbol{Y}$ 及模型 $\\lambda = f(\\boldsymbol{\\pi}, \\boldsymbol{A}, \\boldsymbol{B})$ 计算产生 $Y$ 的概率 $P(\\boldsymbol{Y}|\\lambda) $ 2. 参数估计：训练给定若干输出（训练样本）$Y$，确定模型 $\\lambda = f(\\boldsymbol{\\pi}, \\boldsymbol{A}, \\boldsymbol{B})$ 的参数 3. 最优状态序列搜索：识别已知输出 $\\boldsymbol{Y}$ 及模型$\\lambda = f(\\boldsymbol{\\pi}, \\boldsymbol{A}, \\boldsymbol{B})$，估计系统产生 $\\boldsymbol{Y}$ 最可能的状态序列 $\\boldsymbol{X}$ 两个假设1. 齐次马尔可夫假设：即任意时刻的状态只依赖于前一时刻的状态，与其他时刻的状态无关（初始时刻的状态由参数 $\\boldsymbol{\\pi}$ 决定） 2. 观测独立假设：即任意时刻的观测只依赖于该时刻的状态，与其他无关 概率计算1. 前向概率$$\\alpha_t(j)=P(o_1o_2 \\dots o_{t-1}o{t}, q_t=s_j|\\lambda)$$ 2. 后向概率$$\\beta_t(j)=P(o_1o_2 \\dots o_{t-1}o{t} | q_t=s_j, \\lambda)$$ Viterbi 算法维特比算法是基于动态规划的求序列最短路径的方法 输入：HMM模型 $\\lambda = f(\\boldsymbol{\\pi}, \\boldsymbol{A}, \\boldsymbol{B})$，观测序列$O = o_1o_2 \\dots o_T $ 输出：最️有可能的隐藏状态序列 Baum-Welch 算法$$O = o_1o_2 \\dots o_T \\ \\Rightarrow \\ \\lambda = \\mathop{\\arg\\min}_{\\lambda} P(O|\\lambda)$$ 代码 Reference 知乎：一站式解决：隐马尔可夫模型（HMM）全过程推导及实现 DNN-HMM related Experiments for THUHCSI Course : Speech Signal Processing","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"Trainer","slug":"research_note/17_trainer","date":"2020-10-31T16:00:00.000Z","updated":"2020-11-01T06:46:56.028Z","comments":true,"path":"2020/11/01/research_note/17_trainer/","link":"","permalink":"http://yoursite.com/2020/11/01/research_note/17_trainer/","excerpt":"","text":"编写一个具有可复用性的机器学习代码模版。 当前机器学习特别是深度学习的代码大部分工作流程都是相同或是类似的。我想在 PyTorch 的基础构建一个通用的代码模板统一和规范，通过对模版的代码复用快速复现其他人的论文的结果，或是用于生产环境。 PyTorch-Lightning调研了一下，我认为使用 PyTorch-Lightning 会是一个不错的选择。 工程文件结构需求分析 CheckPoint 和 超参数 的 save 和 reload 数据可视化(loss, T-sne) 高效率的DataLoader 分布式多 GPU 训练 自动生成文档 warmup, early stop, lr_scheduler CheckPoint 和 超参数 的 save 和 reload看了很多别人的代码，很多都是使用 yaml 文件配置超参数和模型结构，使用特定的命令去调用，例如 opennmt-py。 但这并不是我想要的， 我认为首先应该约定模型 checkpoint 的存放文件夹和超参数的存放文件名 数据可视化(loss, T-sne) wandb TensorBoardX 高效率的DataLoader基于 PyTorch 编写的很多代码模型训练速度瓶颈常在于数据 IO DataLoader 在 RNN 和 LSTM 上的不同分布式多GPU训练 dp ddp ddp2","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"Python 矩阵乘法","slug":"2020/21101_mul","date":"2020-10-31T16:00:00.000Z","updated":"2020-12-09T04:59:51.609Z","comments":true,"path":"2020/11/01/2020/21101_mul/","link":"","permalink":"http://yoursite.com/2020/11/01/2020/21101_mul/","excerpt":"","text":"Test Data$$A = \\left[ \\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{matrix} \\right]\\ \\ \\ B = \\left[ \\begin{matrix} 4 &amp; 3 \\\\ 2 &amp; 1 \\end{matrix} \\right]$$ Codeimport numpy as np mat_a = np.matrix([[1, 2], [3, 4]]) mat_b = np.matrix([[4, 3], [2, 1]]) print(\"mat_a\") print(mat_a) print(\"mat_b\") print(mat_b) print(\"dot\") print(np.dot(mat_a, mat_b)) print(\"matmul\") print(np.matmul(mat_a, mat_b)) print(\"multiply\") print(np.multiply(mat_a, mat_b)) print(\"*\") print(mat_a * mat_b) print(\"@\") print(mat_a @ mat_b) 结果除了np.multiply是$ \\left[ \\begin{matrix} 4 &amp; 6 \\\\ 6 &amp; 4 \\end{matrix}\\right]$ 外，其它都是$ \\left[ \\begin{matrix} 8 &amp; 5 \\\\ 20 &amp; 13 \\end{matrix}\\right]$","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"RPC 与 REST","slug":"2020/200830_rpc_rest","date":"2020-08-29T16:00:00.000Z","updated":"2020-10-23T09:17:21.533Z","comments":true,"path":"2020/08/30/2020/200830_rpc_rest/","link":"","permalink":"http://yoursite.com/2020/08/30/2020/200830_rpc_rest/","excerpt":"","text":"RPC面向过程，只发送 GET 和 POST 请求。GET用来查询信息，其他情况下一律用POST。请求参数是动词，直接描述动作本身。 RESTful面向资源，使用 POST、DELETE、PUT、GET 请求，分别对应增、删、改、查操作。请求参数是名词，这个名词就是“增删改查”想要操作的对象。 Reference 通俗易懂 RPC、REST、Dubbo、HTTP、RMI 的区别与联系","categories":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"}],"tags":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/tags/WEB/"}]},{"title":"Parallelized Command","slug":"2020/200810_parallelize","date":"2020-08-28T16:00:00.000Z","updated":"2020-10-23T09:17:21.524Z","comments":true,"path":"2020/08/29/2020/200810_parallelize/","link":"","permalink":"http://yoursite.com/2020/08/29/2020/200810_parallelize/","excerpt":"","text":"命令行： 尖括号 中括号的含义 []：内的内容意思是：可写可不写 {}：那就必须要在{}内给出的选择里选一个。 &lt;&gt;：表示必选 Kaldi run.pl &amp; queue.pl使用方法 run.pl &lt;options&gt; &lt;log-file&gt; &lt;command&gt; ├── run.pl ├── run.sh ├── cmd_1.sh └── cmd_2.sh run.sh # \"JOB\" is core to control nj=2 ./run.pl JOB=1:$nj test.JOB.log bash cmd_JOB.sh wait 和 &amp; 命令 在每个进程中使用&amp;符号进行让脚本在后台运行，无需等待当前进程结束。 为了确保每个进程都执行完成，最后务必使用 wait 关键字，用来确保每一个子进程都执行完成。 &amp; + wait 方法对线程并发数不可控 ./1.sh &amp; ./2.sh &amp; wait for i in `seq 1 3` do &#123; echo $i &#125;&amp; done 模拟队列Reference [ASR_THU] flac文件转wav文件 [ASR_THU] bash 脚本实现批量化作业与并行处理 [CSDN] make_mfcc.sh 使用&amp;和wait让你的脚本并行执行","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"Kaldi","slug":"Kaldi","permalink":"http://yoursite.com/tags/Kaldi/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"Linix","slug":"Linix","permalink":"http://yoursite.com/tags/Linix/"}]},{"title":"The art of Command line","slug":"2020/200829_cmd_art","date":"2020-08-28T16:00:00.000Z","updated":"2020-10-23T09:17:21.514Z","comments":true,"path":"2020/08/29/2020/200829_cmd_art/","link":"","permalink":"http://yoursite.com/2020/08/29/2020/200829_cmd_art/","excerpt":"","text":"命令行的艺术 前言 基础 日常使用 文件及数据处理 系统调试 单行脚本 冷门但有用 仅限 OS X 系统 仅限 Windows 系统 更多资源 免责声明 熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。 前言涵盖范围： 这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到覆盖面广（涉及所有重要的内容），具体（给出具体的最常用的例子），以及简洁（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。 本文主要为 Linux 所写，但在仅限 OS X 系统章节和仅限 Windows 系统章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。 注意事项： 为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 apt-get，yum，dnf，pacman，pip 或 brew（以及其它合适的包管理器）来安装依赖的程序。 遇到问题的话，请尝试使用 Explainshell 去获取相关命令、参数、管道等内容的解释。 基础 学习 Bash 的基础知识。具体地，在命令行中输入 man bash 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你只学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。 熟悉至少一个基于文本的编辑器。通常而言 Vim （vi） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。 学会如何使用 man 命令去阅读文档。学会使用 apropos 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 help 和 help -d 命令获取帮助信息。你可以用 type 命令 来判断这个命令到底是可执行文件、shell 内置命令还是别名。 学会使用 &gt; 和 &lt; 来重定向输出和输入，学会使用 | 来重定向管道。明白 &gt; 会覆盖了输出文件而 &gt;&gt; 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。 学会使用通配符 * （或许再算上 ? 和 […]） 和引用以及引用中 &#39; 和 &quot; 的区别（后文中有一些具体的例子）。 熟悉 Bash 中的任务管理工具：&amp;，ctrl-z，ctrl-c，jobs，fg，bg，kill 等。 学会使用 ssh 进行远程命令行登录，最好知道如何使用 ssh-agent，ssh-add 等命令来实现基础的无密码认证登录。 学会基本的文件管理工具：ls 和 ls -l （了解 ls -l 中每一列代表的意义），less，head，tail 和 tail -f （甚至 less +F），ln 和 ln -s （了解硬链接与软链接的区别），chown，chmod，du （硬盘使用情况概述：du -hs *）。 关于文件系统的管理，学习 df，mount，fdisk，mkfs，lsblk。知道 inode 是什么（与 ls -i 和 df -i 等命令相关）。 学习基本的网络管理工具：ip 或 ifconfig，dig。 学习并使用一种版本控制管理系统，例如 git。 熟悉正则表达式，学会使用 grep／egrep，它们的参数中 -i，-o，-v，-A，-B 和 -C 这些是很常用并值得认真学习的。 学会使用 apt-get，yum，dnf 或 pacman （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 pip 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 pip 来安装会很方便）。 日常使用 在 Bash 中，可以通过按 Tab 键实现自动补全参数，使用 ctrl-r 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 ctrl-r 会向后查找匹配项，按下 Enter 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。 在 Bash 中，可以按下 ctrl-w 删除你键入的最后一个单词，ctrl-u 可以删除行内光标所在位置之前的内容，alt-b 和 alt-f 可以以单词为单位移动光标，ctrl-a 可以将光标移至行首，ctrl-e 可以将光标移至行尾，ctrl-k 可以删除光标至行尾的所有内容，ctrl-l 可以清屏。键入 man readline 可以查看 Bash 中的默认快捷键。内容有很多，例如 alt-. 循环地移向前一个参数，而 alt-* 可以展开通配符。 你喜欢的话，可以执行 set -o vi 来使用 vi 风格的快捷键，而执行 set -o emacs 可以把它改回来。 为了便于编辑长命令，在设置你的默认编辑器后（例如 export EDITOR=vim），ctrl-x ctrl-e 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 escape-v。 键入 history 查看命令行历史记录，再用 !n（n 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 !$， 它用于指代上次键入的参数，而 !! 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 ctrl-r 和 alt-. 来实现。 cd 命令可以切换工作路径，输入 cd ~ 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 ~（例如 ~/.bashrc）。在 sh 脚本里则用环境变量 $HOME 指代 home 目录的路径。 回到前一个工作路径：cd -。 如果你输入命令的时候中途改了主意，按下 alt-# 在行首添加 # 把它当做注释再按下回车执行（或者依次按下 ctrl-a， #， enter）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。 使用 xargs （ 或 parallel）。他们非常给力。注意到你可以控制每行参数个数（-L）和最大并行数（-P）。如果你不确定它们是否会按你想的那样工作，先使用 xargs echo 查看一下。此外，使用 -I{} 会很方便。例如： find . -name '*.py' | xargs grep some_function cat hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname pstree -p 以一种优雅的方式展示进程树。 使用 pgrep 和 pkill 根据名字查找进程或发送信号（-f 参数通常有用）。 了解你可以发往进程的信号的种类。比如，使用 kill -STOP [pid] 停止一个进程。使用 man 7 signal 查看详细列表。 使用 nohup 或 disown 使一个后台进程持续运行。 使用 netstat -lntp 或 ss -plat 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 -u 则检查 UDP 端口）或者 lsof -iTCP -sTCP:LISTEN -P -n (这也可以在 OS X 上运行)。 lsof 来查看开启的套接字和文件。 使用 uptime 或 w 来查看系统已经运行多长时间。 使用 alias 来创建常用命令的快捷形式。例如：alias ll=&#39;ls -latr&#39; 创建了一个新的命令别名 ll。 可以把别名、shell 选项和常用函数保存在 ~/.bashrc，具体看下这篇文章。这样做的话你就可以在所有 shell 会话中使用你的设定。 把环境变量的设定以及登陆时要执行的命令保存在 ~/.bash_profile。而对于从图形界面启动的 shell 和 cron 启动的 shell，则需要单独配置文件。 要想在几台电脑中同步你的配置文件（例如 .bashrc 和 .bash_profile），可以借助 Git。 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 &quot;$FOO&quot;。尽量使用 -0 或 -print0 选项以便用 NULL 来分隔文件名，例如 locate -0 pattern | xargs -0 ls -al 或 find / -print0 -type d | xargs -0 ls -al。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 IFS=$&#39;\\n&#39; 把内部字段分隔符设为换行符。 在 Bash 脚本中，使用 set -x 去调试输出（或者使用它的变体 set -v，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 set -e 令脚本在发生错误时退出而不是继续运行；使用 set -u 来检查是否使用了未赋值的变量；试试 set -o pipefail，它可以监测管道中的错误。当牵扯到很多脚本时，使用 trap 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息： set -euo pipefail trap \"echo 'error: Script failed: see failed command above'\" ERR 在 Bash 脚本中，子 shell（使用括号 (...)）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下： # do something in current dir (cd /some/other/dir &amp;&amp; other-command) # continue in original dir 在 Bash 中，变量有许多的扩展方式。${name:?error message} 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 input_file=${1:?usage: $0 input_file}。在变量为空时使用默认值：${name:-default}。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 output_file=${2:-logfile}，如果省略了 $2，它的值就为空，于是 output_file 就会被设为 logfile。数学表达式：i=$(( (i + 1) % 5 ))。序列：{1..10}。截断字符串：${var%suffix} 和 ${var#prefix}。例如，假设 var=foo.pdf，那么 echo ${var%.pdf}.txt 将输出 foo.txt。 使用括号扩展（{…}）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 mv foo.{txt,pdf} some-dir（同时移动两个文件），cp somefile{,.bak}（会被扩展成 cp somefile somefile.bak）或者 mkdir -p test-{a,b,c}/subtest-{1,2,3}（会被扩展成所有可能的组合，并创建一个目录树）。 通过使用 &lt;(some command) 可以将输出视为文件。例如，对比本地文件 /etc/hosts 和一个远程文件： diff /etc/hosts &lt;(ssh somehost cat /etc/hosts) 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。 &#123; # 在这里写代码 &#125; 了解 Bash 中的“here documents”，例如 cat &lt;&lt;EOF ...。 在 Bash 中，同时重定向标准输出和标准错误：some-command &gt;logfile 2&gt;&amp;1 或者 some-command &amp;&gt;logfile。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 &lt;/dev/null 是一个好习惯。 使用 man ascii 查看具有十六进制和十进制值的ASCII表。man unicode，man utf-8，以及 man latin1 有助于你去了解通用的编码信息。 使用 screen 或 tmux 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 byobu 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 dtach。 ssh 中，了解如何使用 -L 或 -D（偶尔需要用 -R）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。 对 ssh 设置做一些小优化可能是很有用的，例如这个 ~/.ssh/config 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项： TCPKeepAlive=yes ServerAliveInterval=15 ServerAliveCountMax=6 Compression=yes ControlMaster auto ControlPath /tmp/%r@%h:%p ControlPersist yes 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 StrictHostKeyChecking=no，ForwardAgent=yes。 考虑使用 mosh 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 ls 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码： stat -c '%A %a %n' /etc/timezone 使用 percol 或者 fzf 可以交互式地从另一个命令输出中选取值。 使用 fpp（PathPicker）可以与基于另一个命令(例如 git）输出的文件交互。 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：python -m SimpleHTTPServer 7777 （使用端口 7777 和 Python 2）或python -m http.server 7777 （使用端口 7777 和 Python 3）。 以其他用户的身份执行命令，使用 sudo。默认以 root 用户的身份执行；使用 -u 来指定其他用户。使用 -i 来以该用户登录（需要输入_你自己的_密码）。 将 shell 切换为其他用户，使用 su username 或者 sudo - username。加入 - 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。 了解命令行的 128K 限制。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 find 或 xargs 通常可以解决。） 当你需要一个基本的计算器时，可以使用 python 解释器（当然你要用 python 的时候也是这样）。例如： &gt;&gt;&gt; 2+3 5 文件及数据处理 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：find . -iname &#39;*something*&#39;。在所有路径下通过文件名查找文件，使用 locate something （但注意到 updatedb 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。 使用 ag 在源代码或数据文件里检索（grep -r 同样可以做到，但相比之下 ag 更加先进）。 将 HTML 转为文本：lynx -dump -stdin。 Markdown，HTML，以及所有文档格式之间的转换，试试 pandoc。 当你要处理棘手的 XML 时候，xmlstarlet 算是上古时代流传下来的神器。 使用 jq 处理 JSON。 使用 shyaml 处理 YAML。 要处理 Excel 或 CSV 文件的话，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep 等方便易用的工具。 当你要处理 Amazon S3 相关的工作的时候，s3cmd 是一个很方便的工具而 s4cmd 的效率更高。Amazon 官方提供的 aws 以及 saws 是其他 AWS 相关工作的基础，值得学习。 了解如何使用 sort 和 uniq，包括 uniq 的 -u 参数和 -d 参数，具体内容在后文单行脚本节中。另外可以了解一下 comm。 了解如何使用 cut，paste 和 join 来更改文件。很多人都会使用 cut，但遗忘了 join。 了解如何运用 wc 去计算新行数（-l），字符数（-m），单词数（-w）以及字节数（-c）。 了解如何使用 tee 将标准输入复制到文件甚至标准输出，例如 ls -al | tee file.txt。 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 datamash。 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 LANG 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降许多倍。某些情况下（例如集合运算）你可以放心的使用 export LC_ALL=C 来忽略掉国际化并按照字节来判断顺序。 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 TZ=Pacific/Fiji date 可以获取斐济的时间。 了解如何使用 awk 和 sed 来进行简单的数据处理。 参阅 One-liners 获取示例。 替换一个或多个文件中出现的字符串： perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt 使用 repren 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 rename 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。） # 将文件、目录和内容全部重命名 foo -&gt; bar: repren --full --preserve-case --from foo --to bar . # 还原所有备份文件 whatever.bak -&gt; whatever: repren --renames --from '(.*)\\.bak' --to '\\1' *.bak # 用 rename 实现上述功能（若可用）: rename 's/\\.bak$//' *.bak 根据 man 页面的描述，rsync 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 rsync 代替 scp 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的最快方法之一： mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir 若要在复制文件时获取当前进度，可使用 pv，pycp，progress，rsync --progress。若所执行的复制为block块拷贝，可以使用 dd status=progress。 使用 shuf 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。 了解 sort 的参数。显示数字时，使用 -n 或者 -h 来显示更易读的数（例如 du -h 的输出）。明白排序时关键字的工作原理（-t 和 -k）。例如，注意到你需要 -k1，1 来仅按第一个域来排序，而 -k1 意味着按整行排序。稳定排序（sort -s）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 sort -k1，1 | sort -s -k2，2。 如果你想在 Bash 命令行中写 tab 制表符，按下 ctrl-v [Tab] 或键入 $&#39;\\t&#39; （后者可能更好，因为你可以复制粘贴它）。 标准的源代码对比及合并工具是 diff 和 patch。使用 diffstat 查看变更总览数据。注意到 diff -r 对整个文件夹有效。使用 diff -r tree1 tree2 | diffstat 查看变更的统计数据。vimdiff 用于比对并编辑文件。 对于二进制文件，使用 hd，hexdump 或者 xxd 使其以十六进制显示，使用 bvi，hexedit 或者 biew 来进行二进制编辑。 同样对于二进制文件，strings（包括 grep 等工具）可以帮助在二进制文件中查找特定比特。 制作二进制差分文件（Delta 压缩），使用 xdelta3。 使用 iconv 更改文本编码。需要更高级的功能，可以使用 uconv，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号： uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; ' &lt; input.txt &gt; output.txt 拆分文件可以使用 split（按大小拆分）和 csplit（按模式拆分）。 操作日期和时间表达式，可以用 dateutils 中的 dateadd、datediff、strptime 等工具。 使用 zless、zmore、zcat 和 zgrep 对压缩过的文件进行操作。 文件属性可以通过 chattr 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：sudo chattr +i /critical/directory/or/file 使用 getfacl 和 setfacl 以保存和恢复文件权限。例如： getfacl -R /some/path &gt; permissions.txt setfacl --restore=permissions.txt 为了高效地创建空文件，请使用 truncate（创建稀疏文件），fallocate（用于 ext4，xfs，btrf 和 ocfs2 文件系统），xfs_mkfile（适用于几乎所有的文件系统，包含在 xfsprogs 包中），mkfile（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。 系统调试 curl 和 curl -I 可以被轻松地应用于 web 调试中，它们的好兄弟 wget 也是如此，或者也可以试试更潮的 httpie。 获取 CPU 和硬盘的使用状态，通常使用使用 top（htop 更佳），iostat 和 iotop。而 iostat -mxz 15 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。 使用 netstat 和 ss 查看网络连接的细节。 dstat 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 glances，它会在一个终端窗口中向你提供一些系统级的数据。 若要了解内存状态，运行并理解 free 和 vmstat 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。 Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 kill -3 &lt;pid&gt; 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 jps，jstat，jstack，jmap 很有用。SJK tools 更高级。 使用 mtr 去跟踪路由，用于确定网络问题。 用 ncdu 来查看磁盘使用情况，它比寻常的命令，如 du -sh *，更节省时间。 查找正在使用带宽的套接字连接或进程，使用 iftop 或 nethogs。 ab 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 siege。 wireshark，tshark 和 ngrep 可用于复杂的网络调试。 了解 strace 和 ltrace。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（-c）和附加到一个运行的进程参数 （-p）。 了解使用 ldd 来检查共享库。但是永远不要在不信任的文件上运行。 了解如何运用 gdb 连接到一个运行着的进程并获取它的堆栈轨迹。 学会使用 /proc。它在调试正在出现的问题的时候有时会效果惊人。比如：/proc/cpuinfo，/proc/meminfo，/proc/cmdline，/proc/xxx/cwd，/proc/xxx/exe，/proc/xxx/fd/，/proc/xxx/smaps（这里的 xxx 表示进程的 id 或 pid）。 当调试一些之前出现的问题的时候，sar 非常有用。它展示了 cpu、内存以及网络等的历史数据。 关于更深层次的系统分析以及性能分析，看看 stap（SystemTap），perf，以及sysdig。 查看你当前使用的系统，使用 uname，uname -a（Unix／kernel 信息）或者 lsb_release -a（Linux 发行版信息）。 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 dmesg。 如果你删除了一个文件，但通过 du 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：lsof | grep deleted | grep &quot;filename-of-my-big-file&quot; 单行脚本一些命令组合的例子： 当你需要对文本文件做集合交、并、差运算时，sort 和 uniq 会是你的好帮手。具体例子请参照代码后面的，此处假设 a 与 b 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 /tmp 在一个小的根分区上时你可能需要 -T 参数，但是实际上 sort 并不被内存大小约束），参阅前文中关于 LC_ALL 和 sort 的 -u 参数的部分。 sort a b | uniq &gt; c # c 是 a 并 b sort a b | uniq -d &gt; c # c 是 a 交 b sort a b b | uniq -u &gt; c # c 是 a - b 使用 grep . *（每行都会附上文件名）或者 head -100 *（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 /sys、/proc、/etc）时特别好用。 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）： awk '&#123; x += $3 &#125; END &#123; print x &#125;' myfile 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 ls -l 但比 ls -lR 更易于理解： find . -type f -ls 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 acct_id 参数在 URI 中。如果你想计算出每个 acct_id 值有多少次请求，使用如下代码： egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn 要持续监测文件改动，可以使用 watch，例如检查某个文件夹中文件的改变，可以用 watch -d -n 2 &#39;ls -rtlh | tail&#39;；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 watch -d -n 2 ifconfig。 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）： function taocl() &#123; curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md| pandoc -f markdown -t html | iconv -f 'utf-8' -t 'unicode' | xmlstarlet fo --html --dropdtd | xmlstarlet sel -t -v \"(html/body/ul/li[count(p)&gt;0])[$RANDOM mod last()+1]\" | xmlstarlet unesc | fmt -80 &#125; 冷门但有用 expr：计算表达式或正则匹配 m4：简单的宏处理器 yes：多次打印字符串 cal：漂亮的日历 env：执行一个命令（脚本文件中很有用） printenv：打印环境变量（调试时或在写脚本文件时很有用） look：查找以特定字符串开头的单词或行 cut，paste 和 join：数据修改 fmt：格式化文本段落 pr：将文本格式化成页／列形式 fold：包裹文本中的几行 column：将文本格式化成多个对齐、定宽的列或表格 expand 和 unexpand：制表符与空格之间转换 nl：添加行号 seq：打印数字 bc：计算器 factor：分解因数 gpg：加密并签名文件 toe：terminfo 入口列表 nc：网络调试及数据传输 socat：套接字代理，与 netcat 类似 slurm：网络流量可视化 dd：文件或设备间传输数据 file：确定文件类型 tree：以树的形式显示路径和文件，类似于递归的 ls stat：文件信息 time：执行命令，并计算执行时间 timeout：在指定时长范围内执行命令，并在规定时间结束后停止进程 lockfile：使文件只能通过 rm -f 移除 logrotate： 切换、压缩以及发送日志文件 watch：重复运行同一个命令，展示结果并／或高亮有更改的部分 when-changed：当检测到文件更改时执行指定命令。参阅 inotifywait 和 entr。 tac：反向输出文件 shuf：文件中随机选取几行 comm：一行一行的比较排序过的文件 strings：从二进制文件中抽取文本 tr：转换字母 iconv 或 uconv：文本编码转换 split 和 csplit：分割文件 sponge：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 grep -v something some-file | sponge some-file units：将一种计量单位转换为另一种等效的计量单位（参阅 /usr/share/units/definitions.units） apg：随机生成密码 xz：高比例的文件压缩 ldd：动态库信息 nm：提取 obj 文件中的符号 ab 或 wrk：web 服务器性能分析 strace：调试系统调用 mtr：更好的网络调试跟踪工具 cssh：可视化的并发 shell rsync：通过 ssh 或本地文件系统同步文件和文件夹 wireshark 和 tshark：抓包和网络调试工具 ngrep：网络层的 grep host 和 dig：DNS 查找 lsof：列出当前系统打开文件的工具以及查看端口信息 dstat：系统状态查看 glances：高层次的多子系统总览 iostat：硬盘使用状态 mpstat： CPU 使用状态 vmstat： 内存使用状态 htop：top 的加强版 last：登入记录 w：查看处于登录状态的用户 id：用户/组 ID 信息 sar：系统历史数据 iftop 或 nethogs：套接字及进程的网络利用情况 ss：套接字数据 dmesg：引导及系统错误信息 sysctl： 在内核运行时动态地查看和修改内核的运行参数 hdparm：SATA/ATA 磁盘更改及性能分析 lsblk：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息 lshw，lscpu，lspci，lsusb 和 dmidecode：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等 lsmod 和 modinfo：列出内核模块，并显示其细节 fortune，ddate 和 sl：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用” 仅限 OS X 系统以下是仅限于 OS X 系统的技巧。 用 brew （Homebrew）或者 port （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。 用 pbcopy 复制任何命令的输出到桌面应用，用 pbpaste 粘贴输入。 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 alt-b、alt-f 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。 用 open 或者 open -a /Applications/Whatever.app 使用桌面应用打开文件。 Spotlight：用 mdfind 搜索文件，用 mdls 列出元数据（例如照片的 EXIF 信息）。 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 ps，ls，tail，awk，sed）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 gawk 和 gsed 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 perl ）或者经过仔细的测试。 用 sw_vers 获取 OS X 的版本信息。 仅限 Windows 系统以下是仅限于 Windows 系统的技巧。 在 Winodws 下获取 Unix 工具 可以安装 Cygwin 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。 在 Windows 10 上，你可以使用 Bash on Ubuntu on Windows，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 MinGW 以及它的 MSYS 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 Cash。注意在此环境下只有很少的 Unix 命令和命令行可用。 实用 Windows 命令行工具 可以使用 wmic 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。 Windows 实用的原生命令行网络工具包括 ping，ipconfig，tracert，和 netstat。 可以使用 Rundll32 命令来实现许多有用的 Windows 任务 。 Cygwin 技巧 通过 Cygwin 的包管理器来安装额外的 Unix 程序。 使用 mintty 作为你的命令行窗口。 要访问 Windows 剪贴板，可以通过 /dev/clipboard。 运行 cygstart 以通过默认程序打开一个文件。 要访问 Windows 注册表，可以使用 regtool。 注意 Windows 驱动器路径 C:\\ 在 Cygwin 中用 /cygdrive/c 代表，而 Cygwin 的 / 代表 Windows 中的 C:\\cygwin。要转换 Cygwin 和 Windows 风格的路径可以用 cygpath。这在需要调用 Windows 程序的脚本里很有用。 学会使用 wmic，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 Cash。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 MinGW 以及它的 MSYS 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。 更多资源 awesome-shell：一份精心组织的命令行工具及资源的列表。 awesome-osx-command-line：一份针对 OS X 命令行的更深入的指南。 Strict mode：为了编写更好的脚本文件。 shellcheck：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。 Filenames and Pathnames in Shell：有关如何在 shell 脚本里正确处理文件名的细枝末节。 Data Science at the Command Line：用于数据科学的一些命令和工具，摘自同名书籍。","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Grep Tips","slug":"2020/200821_grep","date":"2020-08-20T16:00:00.000Z","updated":"2020-10-23T09:17:21.524Z","comments":true,"path":"2020/08/21/2020/200821_grep/","link":"","permalink":"http://yoursite.com/2020/08/21/2020/200821_grep/","excerpt":"","text":"单个目录示例grep -E \"http\" ./ -R --exclude-dir=.git 多个目录示例grep -E \"http\" . -R --exclude-dir=&#123;.git,res,bin&#125; 多个文件示例grep -E \"http\" . -R --exclude=*.&#123;java,js&#125; Reference grep搜索排除某些目录","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Probilistic Linear Discriminant Analysis","slug":"2020/200817_plda","date":"2020-08-16T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/08/17/2020/200817_plda/","link":"","permalink":"http://yoursite.com/2020/08/17/2020/200817_plda/","excerpt":"","text":"Probabilistic Linear Discriminant Analysis(PLDA) 最初是在人脸识别任务中提出的，被验证效果良好。说话人识别和人脸识别同属于生物信息识别范畴，PLDA 随后被用于说话人识别。 考虑某样本 $x$，可以把 $x$ 看作一段语音的 i-vector, 或是一幅图像等。 样本 $x$ 的分布由协方差矩阵正定的一个GMM定义，如果已知 $x$ 属于某个高斯分量，且该高斯分量的均值点为 $y$，那么有: $$P(x|y) = N(x|y,\\Phi_{w})$$ 上式中, 是正定的协方差矩阵，$y$","categories":[{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"IO 概念区分","slug":"2020/200815_os_io","date":"2020-08-14T16:00:00.000Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2020/08/15/2020/200815_os_io/","link":"","permalink":"http://yoursite.com/2020/08/15/2020/200815_os_io/","excerpt":"","text":"同步（Synchronous） 异步 (Asynchronous) 阻塞 (Blocking) 非阻塞 (Nonblocking) 同步（Synchronous）异步 (Asynchronous)阻塞 (Blocking)非阻塞 (Nonblocking)Reference [知乎] 怎样理解阻塞非阻塞与同步异步的区别","categories":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/tags/WEB/"}]},{"title":"Kaldi Split data & Concatenate scp","slug":"2020/200811_kaldi_cat_ark","date":"2020-08-10T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/08/11/2020/200811_kaldi_cat_ark/","link":"","permalink":"http://yoursite.com/2020/08/11/2020/200811_kaldi_cat_ark/","excerpt":"","text":"Splitscp=$data/wav.scp # prepare split_scps split_scps=\"\" for n in $(seq $nj); do split_scps=\"$split_scps $logdir/wav_$&#123;name&#125;.$n.scp\" done # split scp utils/split_scp.pl $scp $split_scps || exit 1; tip: split_scps=&quot;1.scp 2.scp&quot; Concatenate# concatenate the .scp files together. for n in $(seq $nj); do cat $mfccdir/raw_mfcc_$name.$n.scp || exit 1; done &gt; $data/feats.scp || exit 1","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"Kaldi","slug":"Kaldi","permalink":"http://yoursite.com/tags/Kaldi/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"MySQL CLI Tips","slug":"2020/200811_mysql_cli","date":"2020-08-10T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/08/11/2020/200811_mysql_cli/","link":"","permalink":"http://yoursite.com/2020/08/11/2020/200811_mysql_cli/","excerpt":"","text":"MySQL InstallationCLI Tipsbash CLI# start mysql.server start # login mysql -u root -p mysql -u $user_name -p # status systemctl status mysql.service # run sql script source $sql_path MySQL CLI# create database create database test character set utf8mb4; create database $database_name character set utf8mb4; # show show databases; show tables; mycliReference Mac 上安装 MySQL mycli，一款让你忘记mysql-client的命令行客户端神器","categories":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/tags/WEB/"}]},{"title":"Django Tips & Reference","slug":"2020/200808_django","date":"2020-08-07T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/08/08/2020/200808_django/","link":"","permalink":"http://yoursite.com/2020/08/08/2020/200808_django/","excerpt":"","text":"MVT 模式 Model：负责业务对象与数据库的对象(ORM) Template：负责如何把页面展示给用户 View：负责业务逻辑，并在适当的时候调用 Model 和 Template CLI Tips# create Django projects django-admin startproject $project_name # run server python manage.py runserver #default port is 8000 python -u manage.py runserver 0.0.0.0:4000 # create app python manage.py startapp $app_name # admin python manage.py migrate python manage.py createsuperuser # make migrations python manange.py makeigrations $app_name Model TipsCREATE TABLE myapp_person ( \"id\" serial NOT NULL PRIMARY KEY, \"first_name\" varchar(30) NOT NULL, \"last_name\" varchar(30) NOT NULL ); from django.db import models class Person(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) Reference Django 简介 Django 模版 Django 视图 Django 路由 Django 模型","categories":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"}],"tags":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"},{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/tags/WEB/"}]},{"title":"【毕业要紧】Aduio Toolkit Ref","slug":"2020/200803_aduio_toolkit_ref","date":"2020-08-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2020/08/03/2020/200803_aduio_toolkit_ref/","link":"","permalink":"http://yoursite.com/2020/08/03/2020/200803_aduio_toolkit_ref/","excerpt":"","text":"sox# 查看音频信息 soxi test.wav sox test.wav -n stat # 切割音频 sox in.wav out.wav trim 0 10 # 改变音量 sox -v 0.5 input.wav output.wav # 音频放大0.5倍 # 以 sox foo.wav -n stat -v 命令返回的数字作为放大倍数，将最大化 foo.wav 的音量而不至于出现削波 sox foo.wav -n stat -v 2&gt; vc sox -v `cat vc` foo.wav foo-maxed.wav sox --norm=-1 &lt;inputfile&gt; &lt;outputfile&gt; # 归一化音频响度 librosaimport librosa import librosa.display # load wavfile waveform, sample_rate = librosa.load(filepath) # MFCCs MFCCs = librosa.feature.mfcc(y=waveform, sr=sample_rate, n_mfcc=24) torchadudioimport torch import torchaudio # load wavefile waveform, sample_rate = torchaudio.load(filepath) # MFCCs MFCCc = torchaudio.transforms.MFCC()(waveform) # Specgram Specgram = torchaudio.transforms.Spectrogram()(waveform) KaldiReference[1] [博客园] librosa语音信号处理 [2] [librosa] Document [3] [简书] SOX常用命令 [4] [博客园] Linux 对音频万能处理的命令——SOX","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 CPC & APC","slug":"2020/200714_cpc","date":"2020-07-30T16:00:00.000Z","updated":"2020-10-23T09:17:21.581Z","comments":true,"path":"2020/07/31/2020/200714_cpc/","link":"","permalink":"http://yoursite.com/2020/07/31/2020/200714_cpc/","excerpt":"","text":"Predictive coding is one of the oldest techniques in signal processing for data compression One of the most common strategies for unsupervised learning has been to predict future, missing or contextual information. Mutual Information data: $x$ context: $c$ $$I(x; c) = \\sum_{x,c}p(x, c)log\\frac{p(x|c)}{p(x)}$$ CPCContrastive Predictive Coding (CPC) aims to learn representations that separates the target future frame $x_{i+n}$ and randomly sampled negative frames $\\tilde{x}$, given a context $h_i = (x_1, x_2, …, x_i)$ APCThe methodology of the APC model is largely inspired by language models (LMs) for text, which are typically a probability distribution over sequences of $N$ tokens $(t_1, t_2, …, t_N )$. Given such a sequence, an LM assigns a probability $P(t_1, t_2, …, t_N)$ to the whole sequence by modeling the probability of token $t_k$ given the history $(t_1, t_2, …, t_{k−1})$ $$P(t_1,t_2,…,t_N)=\\prod_{k=1}^{N}P(t_k|t_1,t_2,…,t_{k-1})$$ It is trained by minimizing the negative log-likelihood: $$\\sum_{k=1}^{N}-logP(t_1,t_2,…,t_{k-1};\\theta_{t},\\theta_{rnn},\\theta_{s})$$ where the parameters to be optimized are \u0012$\\theta_{t}$, $\\theta_{rnn}$ and $\\theta_{rnn}$ is a look-up table that maps each token into a vector of fixed dimensionality. $\\theta_{rnn}$ is a Recurrent Neural Network (RNN) used to summarize the sequence history up to the current time step. $\\theta_s$ is a Softmax layer appended at the output of each RNN time step for estimating probability distribution over the tokens. Language modeling is a general task that requires the understanding of many aspects in language in order to perform well. In other words, given an utterance represented as a sequence of acoustic feature vectors $(x_1, x_2, …, x_T)$, the RNN processes each sequence element $x_t$ one at a time and outputs a prediction $y_t$, where $x_t$ and $y_t$ have the same dimensionality.","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"JavaScript tips","slug":"2020/200729_js","date":"2020-07-28T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/29/2020/200729_js/","link":"","permalink":"http://yoursite.com/2020/07/29/2020/200729_js/","excerpt":"","text":"浏览器 渲染引擎: JS 引擎: NodeJSVUE","categories":[{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"}]},{"title":"【毕业要紧】 Kaldi Tips","slug":"2020/200716_kaldi_tips","date":"2020-07-15T16:00:00.000Z","updated":"2020-10-23T09:17:21.562Z","comments":true,"path":"2020/07/16/2020/200716_kaldi_tips/","link":"","permalink":"http://yoursite.com/2020/07/16/2020/200716_kaldi_tips/","excerpt":"","text":"ark ark,t scpark is an archive format to save any Kaldi objects. ark can be flushed to and from unix pipe. cat test.ark | copy-feats ark:- ark,t:- | less # Show the contents in the ark - indicates standard input stream or output stream. s, cs, p s：keys是有序的 cs：按顺序访问数据 （程序不满足会崩溃） p ：忽略错误 FM &amp; FVKaldi has two major types: Matrix and Vector. Binary/Text - Float/Double Matrix: FM, DM Binary/Text - Float/Double Vector: FV, DV As such, features are often stored in one of these two file types. For instance, when you extract i-vectors, they are stored as a matrix of floats (FM) and if you extract x-vectors, they are stored as vectors of float (FV). Often it may be required to convert features stored as FV to FM and vice-versa. convert from FV to FM: copy-vector --binary=false scp:exp/xvectors/xvector.scp ark,t:- | \\ copy-matrix ark,t:- ark,scp:exp/xvectors/xvector_mat.ark,exp/xvectors/xvector_mat.scp convert from FM to FV: copy-matrix --binary=false scp:exp/ivectors/ivector.scp ark,t:- | \\ copy-vector ark,t:- ark,scp:exp/ivectors/ivector_vec.ark,exp/ivectors/ivector_vec.scp Reference and Other Tips[1] desh2608 kaldi-tricks","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"},{"name":"Kaldi","slug":"Kaldi","permalink":"http://yoursite.com/tags/Kaldi/"}]},{"title":"【毕业要紧】 Facebook AI Research wav2vec","slug":"2020/200709_wav2vec","date":"2020-07-08T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/09/2020/200709_wav2vec/","link":"","permalink":"http://yoursite.com/2020/07/09/2020/200709_wav2vec/","excerpt":"","text":"Unknown character-based speech recognition : what’s character-based? Some TipsWe explore unsupervised pre-training for speech recognition by learning representations of raw audio. wav2vec is trained on large amounts of unlabeled audio data and the resulting representations are then used to improve acoustic model training. We pre-train a simple multi-layer convolutional neural network optimized via a noise contrastive binary classification task. Our experiments on WSJ reduce WER of a strong character-based log-mel filterbank baseline by up to 36% when only a few hours of transcribed data is available. Our approach achieves 2.43% WER on the nov92 test set. This outperforms Deep Speech 2, the best reported character-based system in the literature while using two orders of magnitude less labeled training data Our model, wav2vec, is a convolutional neural network that takes raw audio as input and computes a general representation that can be input to a speech recognition system. The objective is a contrastive loss that requires distinguishing a true future audio sample from negatives. Different to previous work (van den Oord et al., 2018), we move beyond frame-wise phoneme classification and apply the learned representations to improve strong supervised ASR systems. wav2vec relies on a fully convolutional architecture which can be easily parallelized over time on modern hardware compared to recurrent models used in previous work. We introduce wav2vec, the first application of unsupervised pre-training to speech recognition with a fully convolutional model. Our approach achieves 2.43% WER on the test set of WSJ, a result that outperforms the next best known character-based speech recognition model in the literature (Amodei et al., 2016) while using two orders of magnitude less transcribed training data. improves resource-poor setups settings where all WSJ training data is used ObjectiveOur model takes raw audio signal as input and then applies two networks. encoder network : embeds the audio signal in a latent space context network : combines multiple time-steps of the encoder to obtain contextualized representations Given raw audio samples $x_i \\in \\mathcal{X}$, we apply the encoder network $f : \\mathcal{X} → \\mathcal{Z}$ parameterized as a five-layer convolutional network Next, we apply the context network $g : \\mathcal{Z} → \\mathcal{C}$ to the output of the encoder network to mix multiple latent representations $z_i…z_{i-v}$ into a single contextualized tensor $c_{i}= g(z_{i}…z_{i−v})$ for a receptive field size $v$. The objective is a contrastive loss that requires distinguishing a true future audio sample from negatives. We train the model to distinguish a sample $z_{i+k}$ that is $k$ steps in the future from distractor samples $\\widetilde{z}$ drawn from a proposal distribution $p_n$, by minimizing the contrastive loss for each step $k = 1,…,K$: $$L_k = -\\sum_{i=1}^{T-k}(log\\sigma(z_{i+k}^{T}h_k(c_i))+\\lambda\\mathbb{E}[log\\sigma(-\\widetilde{z}^{T}h_k(c_i))])$$ $$\\mathcal{L} =\\sum_{k=1}^{K}\\mathcal{L}_k$$ $\\sigma(x)=1/(1+exp(-x))$ : sigmoid $\\sigma(z_{i+k}^{T}h_{k}(c_i))$ : the probability of $z_{i+k}$ being the true sample We consider a step-specific affine transformation(仿射变换) $h_k(c_i) = W_{k}c_{i}+b_{k}$ for each step $k$, that is applied to $c_i$(van den Oord et al., 2018). We optimize the loss $\\mathcal{L} =\\sum_{k=1}^{K}\\mathcal{L}_k$, summing (1) over different step sizes. In practice, we approximate the expectation by sampling ten negatives examples by uniformly choosing distractors from each audio sequence, i.e., $p_n(z) = \\frac{1}{T}$, where $T$ is the sequence length and we set $\\lambda$ to the number of negatives Code ExamplePre Train model Useage The encoder network embeds the audio signal in a latent space the context network combines multiple time-steps of the encoder to obtain contextualized representations import torch from fairseq.models.wav2vec import Wav2VecModel cp = torch.load('/path/to/wav2vec.pt') model = Wav2VecModel.build_model(cp['args'], task=None) model.load_state_dict(cp['model']) model.eval() wav_input_16khz = torch.randn(1,10000) z = model.feature_extractor(wav_input_16khz) c = model.feature_aggregator(z)","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 Self Supervised Learning in Speech Resources","slug":"2020/200708_self_supervised_learning","date":"2020-07-04T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/05/2020/200708_self_supervised_learning/","link":"","permalink":"http://yoursite.com/2020/07/05/2020/200708_self_supervised_learning/","excerpt":"","text":"Supervised LearningGiven: a dataset $\\mathcal{D} = {(x, y)}_i^N$ a loss function $\\mathcal{l}$ Goal: $$min_{\\theta}\\mathbb{E}_{(x, y)}$$ Works well when labeled data is abundant Learn useful representation with the supervision Yann LeCun in self-supervised learning, the systerm learns to predict part of its input from other parts of it input. Goal: Learning to represent the world before learning tasks. Predict any part of the input from any other part Predict the future from the recent past Predict the past from the present Predict the top from the bottom Interspeech 2020: New Trends in self-supervised Speech ProcessingOver the past decade, supervised deep learning models led to great strides in performance for speech processing technologies and applications. However, unlike humans who are capable of self-learning through experiences and interactions, current real-world speech applications are heavily reliant on large volumes of human annotations. For the next generation of speech processing systems to exhibit similar levels of cognitive intelligence as humans, they should be designed to exploit unlabeled, partially labeled, contextual and distant supervision data from multiple concurrent modalities, e.g., text and video, and learning signals from corrective user follow-ups in conversational applications. The main motivation for self-supervised learning is rooted in our need to improve ASR systems when there is a limited amount of labeled data. Self-supervised learning methods [LeCun 2016] construct proxy predictive tasks to train models for downstream scenarios by exploiting large amounts of unlabeled audio data, unpaired text and audio data in the same domain, or speech data with distant unrelated labels, e.g. A text summary or slides of an audio lecture. Through these invented proxy tasks, models learn high-level representations that generalize well across different languages, domains, and deployment scenarios with very few in-domain labeled examples. Self-supervised learning methods achieved major successes in Natural Language Processing (NLP) [Peters 2018, Devlin 2018, Radford 2019, Raffel 2019, Lewis 2019] and Computer Vision (CV) [Sun 2019, He 2019, Xie 2019, Misra 2019]. There is a recent surge in speech processing research work introducing predictive proxy tasks for model training, and achieving impressive results in downstream applications like ASR and speaker recognition. These self-supervised approaches include, but not limited to: Future prediction: Learning an autoregressive model that generates distant future audio features from historical ones [Oard 2018, Chung 2019, Schneider 2019]. Mask prediction: Learning a model that predicts masked parts of the input audio signal [Liu 2019, Song 2019, Baevski 2019a, Baevski 2019b]. Generating contextual data: Learning a model to predict semantically-related contextual information that accompany the speech signal, e.g. Using social media title and comments as input audio labels [Singh 2019, Pascual 2019]. Chaining ASR and TTS: Using unpaired audio and text data to train an ASR system and a TTS system jointly, where one is generating training paired data for the other [Tjandra 2019, Hori 2019, Baskar 2019]. This family of self-supervised methods can be viewed as auto-encoders of speech signals through latent text representations. Effective use of external language models falls into this category to regularize the text representations. Workshop - ICML 2019 Self-Supervised LearningBig data has driven a revolution to many domains of machine learning thanks to modern high-capacity models, but the standard approaches – supervised learning from labels, or reinforcement learning from a reward function – have become a bottleneck. Even when data is abundant, getting the labels or rewards that specify exactly what the model must do is often intractable. Collecting simple category labels for classification is prohibitive for millions of billions of examples, and structured outputs (scene interpretations, interactions, demonstrations) are far worse, especially when the data distribution is non-stationary. Self-supervised learning is a promising alternative where proxy tasks are developed that allow models and agents to learn without explicit supervision in a way that helps with downstream performance on tasks of interest. One of the major benefits of self-supervised learning is increasing data efficiency: achieving comparable or better performance with less labeled data or fewer environment steps (in Reinforcement learning / Robotics). The field of self-supervised learning (SSL) is rapidly evolving, and the performance of these methods is creeping closer to the fully supervised approaches. However, many of these methods are still developed in domain-specific sub-communities, such as Vision, RL and NLP, even though many similarities exist between them. While SSL is an emerging topic and there is great interest in these techniques, there are currently few workshops, tutorials or other scientific events dedicated to this topic. This workshop aims to bring together experts with different backgrounds and applications areas to share inter-domain ideas and increase cross-pollination, tackle current shortcomings and explore new directions. The focus will be on the machine learning point of view rather than the domain side. ICML 2020 Self-supervision in Audio and SpeechThe ongoing success of deep learning techniques depends on the quality of the representations automatically discovered from data. These representations must capture important underlying structures from the raw input, e.g., intermediate concepts, features, or latent variables that are useful for the downstream task. While supervised learning using large annotated corpora can leverage useful representations, collecting large amounts of annotated examples is costly, time-consuming, and not always feasible. This is particularly problematic for a large variety of applications. In the speech domain, for instance, there are many low-resource languages, where the progress is dramatically slower than in high-resource languages such as English. Moreover, annotations are often underspecified for many potential downstream applications, and the related supervised representations might be biased towards the task they are trained on, limiting their exportability to other applications 2. Reference[1] NTU 2020 Spring ML Self-Supervised Learning slide, vpn [2] interspeech2020: New Trends in self-supervised speech processing [3] ICML 2020 Self-supervision in Audio and Speech [4] Workshop - ICML 2019 Self-Supervised Learning [5] [CVPR2020 Tutorial] Talk#5 Self-supervised Learning by Licheng, Yen-Chun, Linjie","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 An overview of voice conversion systems","slug":"research_note/012_VC","date":"2020-07-04T16:00:00.000Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2020/07/05/research_note/012_VC/","link":"","permalink":"http://yoursite.com/2020/07/05/research_note/012_VC/","excerpt":"","text":"VC systerm","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"makefile & cmake & pybind11","slug":"2020/200704_makefile","date":"2020-07-03T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/04/2020/200704_makefile/","link":"","permalink":"http://yoursite.com/2020/07/04/2020/200704_makefile/","excerpt":"","text":"Makefilemakefile 的好处Makefile 带来的好处就是——“自动化编译”，一旦写好，只需要一个make 命令，整个工程完全自动编译，极大的提高了软件开发的效率。make 是一个命令工具，是一个解释 Makefile 中指令的命令工具。 Makefile 关系到了整个工程的编译规则。一个工程中的源文件不计其数，并且按类型、功能、模块分别放在若干个目录中，makefile 定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 Makefile 就像一个Shell 脚本一样，其中也可以执行操作系统的命令。 rules源文件首先会生成中间目标文件，再由中间目标文件生成执行文件 # work pipline # 写代码-&gt; *.cpp -&gt; 编译 -&gt; *.o -&gt; 链接 -&gt; *.a / *.so # Makefile rules target ... : prerequisites ... command ... ... exmapleabout cc cc是unix下面用的编译命令； gcc是linux下面用的编译命令； 很多makefile文件是在Unix下面写的，编译用的是 cc,但是现在很多人喜欢用linux来编译，总不能把makefile文件中所有的cc改成gcc吧，多麻烦啊！ 最后某个大神想到了用连接的方法把cc连接的gcc命令上，运行cc就是运行gcc。 resource Github how to write makefile CmakeCMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK. installationrulesexampleresource learning-cmake CMake Practice CMake rules Mastering CMake CGold: The Hitchhiker’s Guide to the CMake Latest Official CMake doc CMake Example Pybind11pybind11 is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent Boost.Python library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection. installationexamplesresource pybind11 doc","categories":[{"name":"toolkit","slug":"toolkit","permalink":"http://yoursite.com/categories/toolkit/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/%E6%95%88%E7%8E%87/"}]},{"title":"【毕业要紧】 Evaluate Metric","slug":"2020/200705_eval_metric","date":"2020-07-03T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/04/2020/200705_eval_metric/","link":"","permalink":"http://yoursite.com/2020/07/04/2020/200705_eval_metric/","excerpt":"","text":"Accuracy, Acc","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 flow 模型","slug":"research_note/002_flow","date":"2020-07-03T16:00:00.000Z","updated":"2020-10-23T09:17:21.558Z","comments":true,"path":"2020/07/04/research_note/002_flow/","link":"","permalink":"http://yoursite.com/2020/07/04/research_note/002_flow/","excerpt":"","text":"A good representation is one in which the data has a distribution that is easy to model 基础数学生成模型要解决的问题给定两组数据 $z$ 和 $x$ ，其中 $z$ 服从已知的简单先验分布 $\\pi(z)$ ，通常是高斯分布，$x$ 服从复杂的分布 $p(x)$ ,即训练数据代表的分布，现在我们想要找到一个变换函数 $f$ ，它能建立一种 $z$ 到 $x$ 的映射，使得每对于 $\\pi(z)$ 中的一个采样点，都能在 $p(x)$ 中有一个（新）样本点与之对应。 $$ p_g(x) = \\int_z p(x|z)p(z)dz\\ $$ 其中，$ p(x|z) $ - $ the \\ probability \\ of \\ x \\ given \\ z$ 概率分布的变换数学例题设随机变量X具有概率密度 求随机变量 $Y=2X+8$ 的概率密度 Jacobian Matrix$$\\left[ \\begin{array}{ccc} \\frac{\\partial f_1 }{\\partial x_1 } &amp; \\cdots &amp; \\frac{\\partial f_1 }{\\partial x_n } \\\\ \\vdots\\quad &amp; \\ddots &amp; \\vdots\\quad \\\\ \\frac{\\partial f_n }{\\partial x_1 } &amp; \\cdots &amp; \\frac{\\partial f_n }{\\partial x_n } \\\\ \\end{array}\\right]$$ $$J_{ij}=\\frac{\\partial f_i }{\\partial x_j }$$ Determinant耦合层（Coupling Layer）NICEWe propose a deep learning framework for modeling complex high-dimensional densities called Non-linear Independent Component Estimation (NICE). It is based on the idea that a good representation is one in which the data has a distribution that is easy to model. For this purpose, a non-linear deterministic transformation of the data is learned that maps it to a latent space so as to make the transformed data conform to a factorized distribution, i.e., resulting in independent latent variables. We parametrize this transformation so that computing the determinant of the Jacobian and inverse Jacobian is trivial, yet we maintain the ability to learn complex non-linear transformations, via a composition of simple building blocks, each based on a deep neural network. The training criterion is simply the exact log-likelihood, which is tractable. Unbiased ancestral sampling is also easy. We show that this approach yields good generative models on four image datasets and can be used for inpainting. RealNVPUnsupervised learning of probabilistic models is a central yet challenging problem in machine learning. Specifically, designing models with tractable learning, sampling, inference and evaluation is crucial in solving this task. We extend the space of such models using real-valued non-volume preserving (real NVP) transformations, a set of powerful, stably invertible, and learnable transformations, resulting in an unsupervised learning algorithm with exact log-likelihood computation, exact and efficient sampling, exact and efficient inference of latent variables, and an interpretable latent space. We demonstrate its ability to model natural images on four datasets through sampling, log-likelihood evaluation, and latent variable manipulations. “The advantage of Real NVP compared to MAF and IAF is that it can both generate data and estimate densities with one forward pass only, whereas MAF would need D passes to generate data and IAF would need D passes to estimate densities.” GlowFlow-based generative models (Dinh et al., 2014) are conceptually attractive due to tractability of the exact log-likelihood, tractability of exact latent-variable inference, and parallelizability of both training and synthesis. \b In this paper we propose Glow, a simple type of generative flow using an invertible $1 \\times 1$ convolution. Using our method we demonstrate a significant improvement in log-likelihood on standard benchmarks. Perhaps most strikingly, we demonstrate that a generative model optimized towards the plain log-likelihood objective is capable of efficient realisticlooking synthesis and manipulation of large images. Normalizing Flows for Probabilistic Modeling and InferenceNormalizing flows provide a general mechanism for defining expressive probability distributions, only requiring the specification of a (usually simple) base distribution and a series of bijective(双射) transformations. There has been much recent work on normalizing flows, ranging from improving their expressive power to expanding their application. We believe the field has now matured and is in need of a unified perspective. In this review, we attempt to provide such a perspective by describing flows through the lens of probabilistic modeling and inference. We place special emphasis on the fundamental principles of flow design, and discuss foundational topics such as expressive power and computational trade-offs. We also broaden the conceptual framing of flows by relating them to more general probability transformations. Lastly, we summarize the use of flows for tasks such as generative modeling, approximate inference, and supervised learning. 相关论文NICE: Non-linear Independent Components Estimation, Dinh et al. 2014 Variational Inference with Normalizing Flows, Rezende and Mohamed 2015 Density estimation using Real NVP, Dinh et al. May 2016 Improved Variational Inference with Inverse Autoregressive Flow, Kingma et al June 2016 Masked Autoregressive Flow for Density Estimation, Papamakarios et al. May 2017 Glow: Generative Flow with Invertible 1x1 Convolutions, Kingma and Dhariwal, Jul 2018 Normalizing Flows for Probabilistic Modeling and Inference. 2019 参考","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"【毕业要紧】 Speech 领域专业名词（持续更新）","slug":"research_note/001_speech_note","date":"2020-07-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/03/research_note/001_speech_note/","link":"","permalink":"http://yoursite.com/2020/07/03/research_note/001_speech_note/","excerpt":"","text":"16bit-脉冲编码调制 16 bit Pulse-code Modulation, PCM16bit 代表这个⾳频将会按照信号的振幅取离散的 $2^{16}$ 个值，即 -32768～+32767，振幅越⼤，声⾳的强度越⼤。⾳频信号的另⼀个重要参数是采样率，⽐如采样率为 44.1 kHz，意思就是每秒采样 441000 个点。 如果需要提取⾳频信号中的信息，就需要对 采样时间 × 采样率数⽬的点 做预处理。⾸先需要把振幅从整数转变为-1～+1 之间的浮点数，即对所有的振幅先加 32768，除以 32768，然后减去 1.0。我们可以画出振幅随着时间的变化。 预加重在数学上，预加重相当于⼀个⾼通滤波器，起到了提⾼⾼频信号分量、滤除低频噪声的作⽤。在实际应⽤中，预加重是⼀个可选的预处理步骤，对于信号中噪声的滤除有⼀定的效果。 有限长单位冲激响应滤波器 Finite Impulse Response, FIR 递归滤波器，无限脉冲响应数字滤波器 Infinite Impulse Response, IIR 频率 Frequency &amp; 幅度 Magnitude &amp; 相位 Phase音高 Pitch &amp; 音量 Loudness &amp; 音色 Timbre分贝 dB语音特征 Spectrogram Fbanks MFCC PLP Pitch ∆/∆∆ 模数转换 Analog to Digital Conversion，ADC音素 Phoneme描述一种语言的基本单位被称为音素Phoneme，例如BRYAN这个词就可以看做是由B, R, AY, AX, N五个音素构成的。英语中大概有50多个音素，可以用50几个HMM state来表示这些音素。 掩蔽效应 Masking Effects频谱图 Spectrogram声学模型 Acoustic model语音中很多发音都是连在一起的，很难区分，所以一般用左中右三个HMM state来描述一个音素。举例来说BRYAN这个词中的R音素就变成了用B-R, R, R-AY三个HMM state来表示。这样BRYAN这个词根据上下文就需要15个state了，根据所有单词的上下文总共大概需要几千个HMM state，这种方式属于context dependent模型中的三音素triphone模式。这个HMM state的个数在各家语音识别系统中都不一样，是一个需要调的参数。所以声学模型就是如何设置HMM state。 语音模型 Language Model, LMLexicon帧 FrameChunkMean Opinion Score, MOSMOS测试的主要原理是让测评人根据5个等级划分对测试语音的主观感受进行打分，它既可以用于对语音质量进行主观评价，也可以用于对说话人特征相似度的评价。MOS 分是对所有测试语句和所有测评人的综合平均结果。 Shuang Z, Bakis R, Qin Y. IBM voice conversion systems for 2007 TC⁃STAR evaluation‌[J]. Tsinghua Science &amp; Technology, 2008, 13(4): 510⁃514. An ABX Blind Test, ABX盲听测试（ABX测试）主要针对转换后语音的说话人特征相似度进行转换效果评价，借鉴了说话人识别的原理。测试过程中，测评人分别测听3段语音A、B和X，并判断在语音的个性特征方面语音A还是B更接近于X。其中，X是转换后得到的语音，而A和B分别为源语音和目标语音。最后统计所有测评人员的判决结果，计算出听起来像目标语音的百分比。 Text to Speech, TTSVoice Conversion, VCVoice conversion (VC) is a technique to modify the speech from source speaker to make it sound like being uttered by target speaker while keeping the linguistic content unchanged 声码器 vocoder声码器（vocoder)语音信号某种模型的语音分析合成系统。在传输中只利用模型参数，在编译码时利用模型参数估计和语音合成技术的语音信号编译码器，一种对话音进行分析和合成的编、译码器，也称话音分析合成系统或话音频带压缩系统。它是压缩通信频带和进行保密通信的有力工具。 隐马尔可夫模型 Hidden Markov Model, HMM强制对齐训练DNN的时候，需要知道每一帧对应的是什么音素（甚至HMM状态）。而一般语音数据的标注，只有音素串，并不知道每个音素（或HMM状态）的起止时间。“强制对齐”就是利用一个GMM-HMM模型，求出每个音素（或HMM状态）的起止时间。 基于联结时序分类(CTC)的声学模型不再需要对训练的音频序列和文本序列进行强制对齐 Linguistic双语者 Bilingual参考[1] CSLT微信公众号-语音识别基础：（一）语音是什么 [2] CSLT微信公众号-语音识别基础：（二）语音识别方法 [3] 语音识别基础：（三）完整的语音识别实验 [4] 陆军工程大学-语音转换技术研究现状及展望(2019)","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 Tacotron & WaveNet Resources","slug":"research_note/008_tacotron_wavenet","date":"2020-07-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/03/research_note/008_tacotron_wavenet/","link":"","permalink":"http://yoursite.com/2020/07/03/research_note/008_tacotron_wavenet/","excerpt":"","text":"衔接式 Concatenative TTS：这里首先记住单个的语音片段，然后需要重新生成时，再把这些声音片段联合起来。但是，这种方法不能扩展，因为它只能重现记忆中的声音片段，并且如果没有从开始记忆语音片段，就不能生成新的讲话人或不同类型的语音。 参数式 Parametric TTS：这里创建一个模型，用以存储所有要合成语音的音频特征。在 WaveNet 之前，使用参数式 TTS 生成的音频比衔接式 TTS 更不自然。WaveNet 通过直接对音频的产生过程建模改进了当前最先进的技术，而不是使用以前的中间信号处理算法。 WaveNetWavenet由DeepMind提出，是一种利用神经网络系统对原始音频波形（Raw SoundWave）建模的技术，生成的音频质量优于所有的文本转语音（Text-to-Speech，TTS）系统，将计算机输出音频与人类自然语音差距缩小50%，被称为世界最佳。","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 TTS & VC Resources","slug":"research_note/009_tts_vc_tips","date":"2020-07-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2020/07/03/research_note/009_tts_vc_tips/","link":"","permalink":"http://yoursite.com/2020/07/03/research_note/009_tts_vc_tips/","excerpt":"","text":"TTS vs VCVoice Conversion, VC: 语音转换处理的问题是输入一段声音，输出另外一段声音，但这两段声音有些不同，一般我们希望保留声音的内容，改变说话者的音色 Voice conversion (VC) is a technique to modify the speech from source speaker to make it sound like being uttered by target speaker while keeping the linguistic content unchanged Text to Speech, TTS: 文字转语音系统是将一般语言的文字转换为语音。输入一段文本，输出一段语音 ToolkitsPytorch WaveNet vocoderThe goal of the repository is to provide an implementation of the WaveNet vocoder, which can generate high quality raw speech samples conditioned on linguistic or acoustic features. Pytorch tacotron2PyTorch implementation of Natural TTS Synthesis By Conditioning Wavenet On Mel Spectrogram Predictions. This implementation includes distributed and automatic mixed precision support and uses the LJSpeech dataset. Distributed and Automatic Mixed Precision support relies on NVIDIA’s Apex and AMP. Pytorch waveglowWaveGlow combines insights from Glow and WaveNet in order to provide fast, efficient and high-quality audio synthesis, without the need for auto-regression. Pytorch MelGan (official)Train GANs reliably to generate high quality coherent waveforms by introducing a set of architectural changes and simple training techniques. VC articles &amp; Papers陆军工程大学-语音转换技术研究现状及展望(2019)语音转换通常是指将一个人的声音个性化特征通过“修改变换”，使之听起来像另外一个人的声音，同时保持说话内容信息不变。近年来，随着信息处理和机器学习技术的快速发展，语音转换技术也得到了突飞猛进的进步。为此，在简要介绍语音转换基本概念的基础上，重点综述了近几年语音转换的典型模型和方法，分析了语音转换的关键技术，列举了语音转换技术的主要应用场景，梳理了目前语音转换中仍存在的若干技术问题，并展望了语音转换研究的发展方向。 An overview of voice conversion systems(2017)Voice transformation (VT) aims to change one or more aspects of a speech signal while preserving lin- guistic information. A subset of VT, Voice conversion (VC) specifically aims to change a source speaker’s speech in such a way that the generated output is perceived as a sentence uttered by a target speaker. Despite many years of research, VC systems still exhibit deficiencies in accurately mimicking a target speaker spectrally and prosodically, and simultaneously maintaining high speech quality. In this work we provide an overview of real-world applications, extensively study existing systems proposed in the literature, and discuss remaining challenges. Maigo-语音转换技术综述(2019)i-vector 与 PLDA 的数学推导是出了名的复杂，我曾在 2011 年的夏天推导过一个多星期。在这里，我尽可能避开数学细节，用最简洁的语言引入相关概念和方法。 几种传统的语音转换方法 高斯混合模型（Gaussian mixture models, GMM） 频率弯折法（frequency warping） 基于样例的方法（exemplar-based method） 几种现代的语音转换方法 生成对抗式网络（generative adversarial networks, GAN） i-vector + PLDA（probabilistic linear discriminant analysis） 自编码器（autoencoders） TTS articles &amp; Papers清华大学王东老师-TTS","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 Speaker Embedding Resources","slug":"research_note/011_speaker_embedding","date":"2020-07-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/07/03/research_note/011_speaker_embedding/","link":"","permalink":"http://yoursite.com/2020/07/03/research_note/011_speaker_embedding/","excerpt":"","text":"Eval MetricsROC &amp; EEREmbeddingsi-vectorx-vectorBackends","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"【毕业要紧】 Word Embedding Resources","slug":"research_note/010_NLP","date":"2020-07-02T16:00:00.000Z","updated":"2020-10-23T09:17:21.558Z","comments":true,"path":"2020/07/03/research_note/010_NLP/","link":"","permalink":"http://yoursite.com/2020/07/03/research_note/010_NLP/","excerpt":"","text":"one-hot 编码存在的⼀个主要问题是它⽆法表示出词汇间的相似度。","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}]},{"title":"线性代数复习","slug":"research_note/006_solver","date":"2020-06-29T16:00:00.000Z","updated":"2020-07-06T14:47:45.484Z","comments":true,"path":"2020/06/30/research_note/006_solver/","link":"","permalink":"http://yoursite.com/2020/06/30/research_note/006_solver/","excerpt":"","text":"solver SVD: Singular value decomposition LSQR: Least squares solution, can be combined with shrinkage EIGEN: Eigenvalue decomposition, can be combined with shrinkage 线性空间什么是线性空间 空集 $\\varnothing$ 有理数集 $\\mathbb{Q}$ 实数集合 $\\mathbb{R}$ 复数集 $\\mathbb{C}$ 数域：对加、减、乘、除四则运算封闭的非空数集 线性空间的性质","categories":[{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"线性代数","slug":"线性代数","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"美化 Python 异常信息","slug":"2020/200617_pyerrors","date":"2020-06-16T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/17/2020/200617_pyerrors/","link":"","permalink":"http://yoursite.com/2020/06/17/2020/200617_pyerrors/","excerpt":"","text":"安装Github链接PrettyErrors python -m pip install pretty_errors python -m pretty_errors 参考[1] 知乎-一行代码简化Python异常信息","categories":[{"name":"toolkit","slug":"toolkit","permalink":"http://yoursite.com/categories/toolkit/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/%E6%95%88%E7%8E%87/"}]},{"title":"计算机网络复习","slug":"2020/200621_computer_network","date":"2020-06-16T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/17/2020/200621_computer_network/","link":"","permalink":"http://yoursite.com/2020/06/17/2020/200621_computer_network/","excerpt":"","text":"工作装备 物理层：中继器，集线器 数据链路：网桥，交换机 网络层：路由器 传输层： 网关 网络协议 物理层： RJ45 、 CLOCK 、 IEEE802.3 数据链路： PPP 、 FR 、 HDLC 、 VLAN 、 MAC 网络层： IP 、 ICMP 、 ARP 、 RARP 、 OSPF 、 IPX 、 RIP 、 IGRP 传输层： TCP 、 UDP 、 SPX 会话层： NFS 、 SQL 、 NETBIOS 、 RPC 表示层： JPEG 、 MPEG 、 ASII 应用层： FTP 、 DNS 、 Telnet 、 SMTP 、 HTTP 、 WWW 、 NFS","categories":[{"name":"offer","slug":"offer","permalink":"http://yoursite.com/categories/offer/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"DNF 模型","slug":"research_note/003_DNF","date":"2020-06-16T13:42:21.565Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2020/06/16/research_note/003_DNF/","link":"","permalink":"http://yoursite.com/2020/06/16/research_note/003_DNF/","excerpt":"","text":"","categories":[{"name":"flows","slug":"flows","permalink":"http://yoursite.com/categories/flows/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"flow 模型的Pytorch实现","slug":"research_note/004_flow_implement","date":"2020-06-16T13:42:21.565Z","updated":"2020-10-23T09:17:21.558Z","comments":true,"path":"2020/06/16/research_note/004_flow_implement/","link":"","permalink":"http://yoursite.com/2020/06/16/research_note/004_flow_implement/","excerpt":"","text":"","categories":[{"name":"flows","slug":"flows","permalink":"http://yoursite.com/categories/flows/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"DNF 模型的Pytorch实现","slug":"research_note/005_DNF_implement","date":"2020-06-16T13:42:21.565Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/16/research_note/005_DNF_implement/","link":"","permalink":"http://yoursite.com/2020/06/16/research_note/005_DNF_implement/","excerpt":"","text":"","categories":[{"name":"flows","slug":"flows","permalink":"http://yoursite.com/categories/flows/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linear Discriminant Analysis","slug":"2020/200614_Linear_Discriminant_Analysis","date":"2020-06-13T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/14/2020/200614_Linear_Discriminant_Analysis/","link":"","permalink":"http://yoursite.com/2020/06/14/2020/200614_Linear_Discriminant_Analysis/","excerpt":"","text":"线性判别分析（Linear Discriminant Analysis，LDA）是一种经典的线性分类方法。LDA是一种有监督的线性分类算法。LDA的基本思想是将数据投影到低维空间后，使得：同一类数据尽可能接近，不同类数据尽可能疏远。在对新样本进行分类时，将其投影到同样的低维空间上，再根据投影点的位置来确定新样本的类别。 值得一提的是，LDA 可从贝时斯决策理论的角度来阐释，并可证明，当两类数据同先验、满足高斯分布且协方差相等时，LDA 可达到最优分类。 Fisher discriminant criterion $X_i$ 表示 $i$ 类示例的集合 $N$ 表示有 $N$ 类，且第 $i$ 类的样本数为 $N_i$ $n$ 表示总共有 $n$ 个数据 $\\mu_i$ 表示 $i$ 类示例的均值向量，$\\mu$ 表示总的均值向量 $\\Sigma_i$ 表示 $i$ 类示例的协方差矩阵 $S_w$ 表示类内散度矩阵（within-class scatter matrix） $S_b$ 表示类间散度矩阵（between-class scatter matrix） $S_t$ 表示全局散度矩阵 $w$ 为变换矩阵 $J(w)$ 是最大目标Fisher判别准则 $$\\boldsymbol{\\mu_i} = \\frac{1}{N_i} \\sum_{\\boldsymbol{x} \\in X_i}\\boldsymbol{x}$$ $$\\Sigma_i = \\sum_{\\boldsymbol{x} \\in X_i}(\\boldsymbol{x}-\\boldsymbol{\\mu_i})(\\boldsymbol{x}-\\boldsymbol{\\mu_i})^T$$ $$S_w = \\sum^N_{i=1}S_{w_i} = \\sum^N_{i=1}\\Sigma_i = \\sum^N_{i=1}\\sum_{\\boldsymbol{x} \\in X_i}(\\boldsymbol{x}-\\boldsymbol{\\mu_i})(\\boldsymbol{x}-\\boldsymbol{\\mu_i})^T$$ $$S_b = S_t - S_w = \\sum^N_{i=1}N_i(\\boldsymbol{\\mu_i}-\\boldsymbol{\\mu})(\\boldsymbol{\\mu_i}-\\boldsymbol{\\mu})^T$$ $$S_t = S_b + S_w =\\sum_{i=1}^{n}(\\boldsymbol{x_i}-\\boldsymbol{\\mu})(\\boldsymbol{x_i}-\\boldsymbol{\\mu})^T$$ $$J(w) = \\frac{w^TS_bw}{w^TS_ww}$$ 优化目标推导过程 $$ \\frac{\\mathrm{d}J(w)}{\\mathrm{d}w} = 0 $$ $$\\frac{\\mathrm{d}J(w)}{\\mathrm{d}w} = \\frac{\\mathrm{d}}{\\mathrm{d}w}(\\frac{w^TS_bw}{w^TS_ww}) =$$ 多分类 LDA 可以有多种实现方法：使用 $S_b$, $S_w$ , $S_t$ 三者中的任何两个即可 LDA 算法的训练流程 计算类内散度矩阵 $S_w$ 计算类间散度矩阵 $S_b$ 计算矩阵 $S_w^{-1}S_b$ 计算矩阵 $S_w^{-1}S_b$ 的特征值与特征向量，按从小到大的顺序选取前 $d$ 个特征值和对应的 $d$ 个特征向量，得到投影矩阵 $w$ sklearn包 LDA 的使用from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA lda = LDA(solver='svd', n_components=LDA_components) # fit lda.fit(train_data, train_label) # transform train_data = lda.transform(train_data) test_data = lda.transform(test_data) LDA Python 代码实现相关论文参考[1] CSLT-THU王东老师PPT-Static Analysis: LDA [2] 西瓜书-线性判别分析 [3] CSLT-THU王东老师-现代机器学习导论 [4] 机器学习实验室微信公众号-数学推导LDA线性判别分析 [5] 博客园-LDA [6] 知乎-线性判别分析LDA原理及推导过程（非常详细） [7] THU袁博老师数据挖掘课程-数据预处理PPT [8] 知乎-Fisher判别分析(Fisher Discriminant Analysis)","categories":[{"name":"backends","slug":"backends","permalink":"http://yoursite.com/categories/backends/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"多个 PDF 文件的快速合并","slug":"2020/200610_pdf_merge","date":"2020-06-09T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/10/2020/200610_pdf_merge/","link":"","permalink":"http://yoursite.com/2020/06/10/2020/200610_pdf_merge/","excerpt":"","text":"毕设论文需要合并多个pdf文件，记录一下pdf文件的合并过程 安装sudo apt-get install poppler-utils 合并# 全部 pdfunite *.pdf all.pdf # 顺序 pdfunite 1.pdf 2.pdf 3.pdf 4.pdf all-1234.pdf 参考[1] linux bash合并PDF文件","categories":[{"name":"toolkit","slug":"toolkit","permalink":"http://yoursite.com/categories/toolkit/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/%E6%95%88%E7%8E%87/"}]},{"title":"Softmax & Cross-Entropy & KLD","slug":"2020/200609_softmax","date":"2020-06-08T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/09/2020/200609_softmax/","link":"","permalink":"http://yoursite.com/2020/06/09/2020/200609_softmax/","excerpt":"","text":"Softmax$ Softmax $ 的作用是把一个序列$\\boldsymbol{a}$，变成概率。 $$ Softmax(\\boldsymbol{a}) = \\frac{e^{a_i}}{\\sum_j e^{a_j}} $$ 从概率的角度解释 $Softmax$ 的话，就是 $S_i = \\frac{e^{a_i}}{\\sum_{k=1}^Ne^{a_k}} = P(y=i|a)$ 其中，$LR$ 是 $Softmax$ 的类别数为 2 时 $Softmax$ 的特殊形式 Cross-Entropy给定两个概率分布： $p$ （理想结果即正确标签向量）和 $q$ （神经网络输出结果即经过 $softmax$ 转换后的结果向量），则通过 $q$ 来表示 $p$ 的交叉熵为 $$ H(p, q) = -\\sum_x p(x)log(q(x)) $$ 例如 $$H(p=[1,0,0], q=[0.5,0.4,0.1]) = -(1 \\cdot log(0.5) + 0 \\cdot log(0.4) + 0 \\cdot log(0.1)) $$ nll_loss (negative log likelihood loss)","categories":[{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"概率论","slug":"概率论","permalink":"http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"}]},{"title":"Pytorch Data Loader","slug":"2020/200609_pytorch_data_loader","date":"2020-06-08T16:00:00.000Z","updated":"2020-07-03T11:20:05.523Z","comments":true,"path":"2020/06/09/2020/200609_pytorch_data_loader/","link":"","permalink":"http://yoursite.com/2020/06/09/2020/200609_pytorch_data_loader/","excerpt":"","text":"GILPython 自带 Gobal Interpreter Lock (GIL)，任何时候，Python只能运行一个线程 DotaLoader的构建DataLoader(dataset, batch_size=200, shuffle=False, sampler=None, batch_sampler=None, num_workers=0, collate_fn=None, pin_memory=False, drop_last=False, timeout=0, worker_init_fn=None) 官方模板PyTorch官方为我们提供了自定义数据读取的标准化代码代码模块。 from torch.utils.data import Dataset class CustomDataset(Dataset): def __init__(self, ...): pass def __getitem__(self, index): return (img, label) def __len__(self): # return examples size return count __init__()函数用于初始化数据读取逻辑，比如读取包含标签和图片地址的csv文件、定义transform组合等。 __getitem__()函数用来返回数据和标签。目的上是为了能够被后续的dataloader所调用。 __len__()函数则用于返回样本数量。 其中，__getitem__() 和__len__()用于构建Map-style datasets；__iter__()用于构建Iterable-style datasets（一般不太用） 训练集和验证集的划分如果需要对数据划分训练集和验证集，torch的Dataset对象也提供了random_split函数作为数据划分工具，且划分结果可直接供后续的DataLoader使用。 from torch.utils.data import random_split trainset, valset = random_split(dataset, [len_dataset*0.7, len_dataset*0.3]) Pytorch 并行化 Data Parallel, DP: 数据并行化 Distributed Data Parallel, DDP: 分布式数据并行化 Mnist Dataset 的实现参考[1] 官方文档 torch.utils.data [2] 夕小瑶的卖萌屋-PyTorch数据Pipeline标准化代码模板","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Pytorch","slug":"Pytorch","permalink":"http://yoursite.com/tags/Pytorch/"}]},{"title":"概率论复习","slug":"research_note/007_bayes","date":"2020-06-07T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/06/08/research_note/007_bayes/","link":"","permalink":"http://yoursite.com/2020/06/08/research_note/007_bayes/","excerpt":"","text":"加法公式$$ P(A \\cup B) = P(A) + P(B) - P(A\\cap B) $$ 乘法公式$$ P(AB) = P(A)P(B|A) $$ 协方差矩阵 与 散度矩阵将协方差矩阵乘以系数 $n-1$ 就得到了散度矩阵，矩阵的大小由特征维数 $d$ 决定，是一个为 $d×d$ 的半正定矩阵 贝叶斯公式贝叶斯公式用于描述两个条件概率之间的关系，比如 $P(A|B)$ 和 $P(B|A)$。 $$ P(A|B) = P(A) \\frac{P(B|A)}{P(B)} $$ $P(A|B)$ ：后验概率 $P(A)$：先验概率 $$ P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{\\sum^n_{j=1} P(A_j)P(B|A_j)} $$ 全概率公式$$ P(B) = \\sum^n_{i=1} P(A_i)P(B|A_i) $$ 事件 $B$ 总伴随着某个 $A_i$ 出现 贝叶斯公式与全概率公式之间的关系$P(A_i|B)$ 后验概率（新信息 $B$ 出现后 $A$ 发生的概率） = $P(A)$ 先验概率（ $A$ 发生的概率） $ｘ$ 可能性函数（新信息带出现来的调整） 条件概率条件概率是指事件 $A$ 在另外一个事件 $B$ 已经发生条件下的发生概率。条件概率表示为：$P(A|B)$，读作“在B的条件下A的概率”或是the probability of x given z 边缘概率贝叶斯估计和极大似然估计 MLE, Maxium Likelihood Estimator：极大似然估计 MAP, Maxium a Posterior：最大后验概率 最大似然估计和贝叶斯估计最大区别便在于估计的参数不同。 最大似然估计是一种确定模型参数值的方法。确定参数值的过程，是找到能最大化模型产生真实观察数据可能性的那一组参数。要估计的参数 $θ$ 被当作是固定形式的一个未知变量，然后我们结合真实数据通过最大化似然函数来求解这个固定形式的未知变量。 贝叶斯估计则是将参数视为是有某种已知先验分布的随机变量，意思便是这个参数他不是一个固定的未知数，而是符合一定先验分布如：随机变量θ符合正态分布等！那么在贝叶斯估计中除了类条件概率密度 $p(x|w)$ 符合一定的先验分布，参数 $θ$ 也符合一定的先验分布。我们通过贝叶斯规则将参数的先验分布转化成后验分布进行求解。 在贝叶斯模型使用过程中，贝叶斯估计用的是后验概率，而最大似然估计直接使用的是类条件概率密度。 最大似然估计（和其他类似方法）把待估计的参数看作是确定性的量，只是其取值未知。最佳估计就是使得产生已观测到的样本（即训练样本）的概率为最大的那个值。 与此不同的是，贝叶斯估计则把待估计的参数看成是符合某种先验分布的随机变量。对样本进行观测的过程，就是把先验概率密度转化为后验概率密度，这样就利用样本的信息修正了对参数的初始估计值。 参考[1] B站-「一个模型」教你搞定贝叶斯和全概率公式 [2] 知乎-从最大似然估计开始，你需要打下的机器学习基石 [3] B站-MLE(极大似然)和MAP(最大后验)","categories":[{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"概率论","slug":"概率论","permalink":"http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"}]},{"title":"线段树","slug":"2020/200531_segment_tree","date":"2020-05-30T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/05/31/2020/200531_segment_tree/","link":"","permalink":"http://yoursite.com/2020/05/31/2020/200531_segment_tree/","excerpt":"","text":"线段树的功能线段树用来处理数组的区间查询（range query）和元素更新（update）操作。可以进行区间最大值，区间最小值或者区间异或值的查询。对应于树状数组，线段树进行更新（update）的操作为O(logn)，进行区间查询（range query）的操作也为O(logn)。 线段树的初始化更新（update）区间查询（range query）完整的板子参考练习题参考","categories":[{"name":"板子","slug":"板子","permalink":"http://yoursite.com/categories/%E6%9D%BF%E5%AD%90/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"板子","slug":"板子","permalink":"http://yoursite.com/tags/%E6%9D%BF%E5%AD%90/"}]},{"title":"FFT 板子","slug":"2020/200601_FFT","date":"2020-05-30T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2020/05/31/2020/200601_FFT/","link":"","permalink":"http://yoursite.com/2020/05/31/2020/200601_FFT/","excerpt":"","text":"傅里叶变换 VS 离散傅里叶变换","categories":[{"name":"板子","slug":"板子","permalink":"http://yoursite.com/categories/%E6%9D%BF%E5%AD%90/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"板子","slug":"板子","permalink":"http://yoursite.com/tags/%E6%9D%BF%E5%AD%90/"}]},{"title":"神经网络结构","slug":"2020/200531_nnet","date":"2020-05-30T16:00:00.000Z","updated":"2020-07-03T09:36:12.977Z","comments":true,"path":"2020/05/31/2020/200531_nnet/","link":"","permalink":"http://yoursite.com/2020/05/31/2020/200531_nnet/","excerpt":"","text":"多层感知机（MLP, Multilayer Perceptron）Fully Connected Layer 时延神经网络(TDNN, Time-Delay Neural Networks)TDNN是一个常用于语音信号处理领域卷积神经网络，使用 FFT 预处理的语音信号作为输入，其隐含层由2个一维卷积核组成，以提取频率域上的平移不变特征。 卷积神经网络（CNN, Convolutional Neural Networks）内积 (dot product, scalar product)Architect Convolution Pooling Flatten Property Some of patterns are much smaller than the whole image The smae pattterns appear in different regions Subsampling the pixels will not change the object 1 x 1 Convolution1 x 1 的卷积核用来实现降通道数的操作 循环神经网络（RNN, Recurrent Neural Networks）长短期记忆网络（LSTM, Long Short-Term Memorys）参考[1] B站-李宏毅讲解卷积神经网络（带字幕","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"神经网络","slug":"神经网络","permalink":"http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}]},{"title":"生成式模型 VS 判别式模型","slug":"2020/200530_Difference_between_generative_model_and_discriminative_model","date":"2020-05-29T16:00:00.000Z","updated":"2020-06-16T13:42:21.566Z","comments":true,"path":"2020/05/30/2020/200530_Difference_between_generative_model_and_discriminative_model/","link":"","permalink":"http://yoursite.com/2020/05/30/2020/200530_Difference_between_generative_model_and_discriminative_model/","excerpt":"","text":"生成式模型 VS 判别式模型Discriminative models learn the classification (hard or soft) boundary between classes. A discriminative model learns the conditional probability distribution p(y|x) - which you should read as “the probability of y given x”. Generative models model the distribution of individual classes. A generative model learns the joint probability distribution p(x,y) 生成模型是模拟这个结果是如何产生的,然后算出产生各个结果的概率。判别模型是发现各个结果之间的不同,不关心产生结果的过程。 典型代表模型生成式模型 朴素贝叶斯 K紧邻（KNN） 混合高斯模型 隐马尔科夫模型（HMM） 贝叶斯网络 Sigmoid Belief Networks 马尔科夫随机场（Markov Random Fields） 深度信念网络（DBN） 判别式模型 线性回归（Linear Regression） 逻辑斯蒂回归（Logistic Regression） 神经网络（NN） 支持向量机（SVM） 高斯过程（Gaussian Process） 条件随机场（CRF） CART(Classification and Regression Tree) 参考[1] On Discriminative vs. Generative classifiers: A comparison of logistic regression and naive Bayes [2] The difference between a generative and a discriminative algorithm? [3] 判别式模型与生成式模型","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"生成式模型","slug":"生成式模型","permalink":"http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%BC%8F%E6%A8%A1%E5%9E%8B/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"优化器","slug":"2020/200530_optimizer","date":"2020-05-29T16:00:00.000Z","updated":"2020-06-16T13:42:21.566Z","comments":true,"path":"2020/05/30/2020/200530_optimizer/","link":"","permalink":"http://yoursite.com/2020/05/30/2020/200530_optimizer/","excerpt":"","text":"深度学习中的优化算法主要围绕梯度下降算法展开，其主要思想是：选取一定的训练样本，按照一定的步长（学习率）沿着梯度的方向调整更新参数，优化模型的目标函数。 SGD随机梯度下降法是每次使用一批数据进行梯度的计算，而非计算全部数据的梯度，因为如果每次计算全部数据的梯度，会导致运算量加大，运算时间变长，容易陷入局部最优解，而随机梯度下降可能每次不是朝着真正最小的方向，这样反而可以跳出局部的最优解。","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"优化器","slug":"优化器","permalink":"http://yoursite.com/tags/%E4%BC%98%E5%8C%96%E5%99%A8/"}]},{"title":"My First Blog","slug":"2020/200527_first","date":"2020-05-26T16:00:00.000Z","updated":"2020-10-23T09:17:21.514Z","comments":true,"path":"2020/05/27/2020/200527_first/","link":"","permalink":"http://yoursite.com/2020/05/27/2020/200527_first/","excerpt":"","text":"欢迎来到zyz的个人网站。这是我的第一篇博客。","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Weekly","slug":"research_note/16_new_flow","date":"2000-10-30T16:00:00.000Z","updated":"2020-11-01T06:08:55.281Z","comments":true,"path":"2000/10/31/research_note/16_new_flow/","link":"","permalink":"http://yoursite.com/2000/10/31/research_note/16_new_flow/","excerpt":"","text":"2020-10-31当前很多网上开源的 Normalizing Flow 模型都是在一些 toy 数据测试的，例如使用 np.random.randn() 函数随机生成的 2d 数据。本周我尝试复现了一下toy数据集的结果，下周我想抽时间编写和实现 NF 模型的多 GPU 训练代码（基于 PyTorch 框架）, 换 mnist 数据集测试一下。","categories":[{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"Contrastive Learning for Speaker Recogition","slug":"research_note/014_pretrain","date":"1999-12-31T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2000/01/01/research_note/014_pretrain/","link":"","permalink":"http://yoursite.com/2000/01/01/research_note/014_pretrain/","excerpt":"","text":"We don’t know something is blue until we see red. We don’t know something is music until we hear noise. 在过去，无监督学习以例如 VAE、GAN 这样的生成式模型比较多，生成式模型期望利用数据表征重构完整数据。但最近判别式模型逐渐走进了人们的视野。对比学习是何恺明、Hinton、LeCun等大佬最近关注的研究重点之一。对比学习通过数据之间的对比进行表示学习，期望数据表征包含足够多信息即可。近日，唐杰老师对 Self-Supervised Learning 发表了一篇综述性的文章。 CN-Celeb 数据集的发布展现出当前说话人识别系统在真实环境下的性能表现可能并不理想，系统的鲁棒性还有待增强。我认为 SimCLR 为代表的对比学习方法可以更好的提高当前说话人识别系统的鲁棒性，特别是可以提高在 CN-Celeb 数据集上的表现。 Contrastive Learning对比学习的思路可以用一句话来概括 “We don’t know something is blue until we see red”。它通过数据之间的对比进行表示学习，从而让像的样本所得表示差异小，让不像的样本所得表示差异大。“对比学习”中的“对比”是 positive 样本 和 negative 样本的对比。在学习到的“表示空间”内，增大某样本与其 positive 样本之间的相似度，减少与negative 样本的相似度： $$\\textrm{score}(f(x),f(x^{+})) &gt;&gt; \\textrm{score}(f(x), f(x^{-}))$$ 其中，互信息(Mutual Information, MI)在对比学习中是一个非常重要的概念，是指一个随机变量由于已知另一个随机变量而减少的不确定性，通过最大化互信息进行表征学习，从而期望数据表征包含足够多信息。 $MI(x;c) = \\sum_{x,c}p(x,c)log\\frac{p(x|c)}{p(x)}$ 。很多大佬也提出了一系列对比学习的 Loss，其中比较有代表性的是： InfoNCE (InfoNCE 是 MI 的下界) NCE Margin Triplet 在对比学习中，我认为有 3 个非常典型的学习框架可以应用于说话人识别这样的语音信号处理领域中，分别如下: 1. CPC Anchor: 自回归模型历史时序 Positive: 同一时序未来时刻的信息 Negative: 不同时序未来时刻的信息 2. MoCoMoCo 是由何恺明一作提出用于 CV 领域的方法。它的网络训练的方法和我之前用 Pytorch 写的 flow 的训练模式很像 3. SimCLRSimCLR 是由 Hinton 参与提出的一个 Constractive Learning 通用学习框架，我认为它的核心是Data Argument。 CN-Celeb Pretrain ExperimentCN-Celeb 数据集的发布展现出当前说话人识别系统在真实环境下的性能表现可能并不理想，系统的鲁棒性还有待增强。 Reference[1] [Amit Chaudhary] illustrated-simclr [2] [Amit Chaudhary] SSL [3] [sthalles] simple-self-supervised-learning","categories":[],"tags":[]},{"title":"CPC Work Plan","slug":"research_note/15_cpc_asv_work","date":"1999-12-31T16:00:00.000Z","updated":"2020-10-23T09:17:21.560Z","comments":true,"path":"2000/01/01/research_note/15_cpc_asv_work/","link":"","permalink":"http://yoursite.com/2000/01/01/research_note/15_cpc_asv_work/","excerpt":"","text":"实验分为两个阶段， 搭建 基于MFCC 的 baseline; 之后是引入 wav2vec 获取语音的 CPC feature 进行实验。 DataSet使用 LibSpeech 训练说话人识别模型和做语音预训练，使用 sitw 和 CN-Celeb 测试 ASV 系统性能 LibSpeech (Pretain &amp; Dev) sitw (Test) CN-Celeb (Test) Toolkit Kaldi fariseq-wav2vec Sitw-devi-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA x-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA Sitw-evali-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA x-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA CN-Celebi-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA x-vector Equel Error Rate MFCC wav2vec c wav2vec z cosine PLDA LDA PLDA","categories":[],"tags":[]},{"title":"【CSLT-THU cvss SELF】","slug":"research_note/014_self_cvss","date":"1999-12-31T16:00:00.000Z","updated":"2020-10-31T12:09:34.574Z","comments":true,"path":"2000/01/01/research_note/014_self_cvss/","link":"","permalink":"http://yoursite.com/2000/01/01/research_note/014_self_cvss/","excerpt":"","text":"Self-Supervised Pretrain speech representation for Speaker Recogntion The ongoing success of deep learning techniques depends on the quality of the representations automatically discovered from data. What is a good representation? high-performing on a diverse set of downstream tasks using simple models. useful in transfer learning with small amounts of data for a new task. [1] Introduction Recently, Self-Supervised Learning(SSL) shows a promising approach for data representation. Self-Supervised Learning is a version of unsupervised learning where data provides the supervision, and the goal of SSL is learning represent the world before learning tasks. For instance, BERT is a well-know NLP model developed by Google for pre-training language representations. It leverages an enormous amount of plain text data publicly available on the web and is trained in an unsupervised manner, and it can map a variable-length sentence or word to a fixed-length vector for many NLP downstream tasks. In speech processing filed, the extraction and selection of the best parametric representation of acoustic signals is an important task in the design of any speech recognition system or speaker recognition sysytem. However, the characteristics of the speakers in speech signal are poorly captured by the traditional acoustic features, such as the amplitudes of a wave signal, log Mel spectrograms, Mel frequency cepstral coefficients(MFCCs), or Filter banks(Fbanks). The goal of Self-Supervised speech representation is to leverages an enormous amount of unlabeled speech data publicly available on the web and is trained in an unsupervised manner and find a transformation from the surface features that makes high-level properties of speech more accessible to downstream tasks, such as speech recognition and speaker recognition. Therefore, inspired by the idea of Self-Supervised Learning, I did some experiments about Self-Supervised Speech Representation Feature for Speaker Recongnition task. [2] Experiment Toolkits fairseq: fairseq is powerful seq2seq model toolkit developed by Facebook AI research. wav2vec is a subset project in fairseq, which is trained on large amounts of unlabeled audio data and the resulting representations are then used to improve acoustic model training. Kaldi: Kaldi is a powerful toolkit for speech signal processing, speech recognition and speaker recognition. Dataset P100: a small speech command dataset which contains 100 speakers. P80(dev): for ASV system training, subset of P100 which contains 80 speakers P20(enroll &amp; test): for ASV system evalutation, subset of P100 which contains 20 speakers Config Group 1: Average Pooling - baseline MFCC average: MFCC feature with average pooling - wav2vec c average: wav2vec pretrain feature c with average pooling - wav2vec z average: wav2vec pretrain feature z with average poolingGroup 2: i-vector - baseline MFCC i-vector: MFCC feature with i-vector ASV system - wav2vec c i-vector: wav2vec pretrain feature c with i-vector ASV system - wav2vec z i-vector: wav2vec pretrain feature z with i-vector ASV systemGroup 3: x-vector - baseline MFCC x-vector: MFCC feature with x-vector ASV system - wav2vec c x-vector: wav2vec pretrain feature c with x-vector ASV system - wav2vec z x-vector: wav2vec pretrain feature z with x-vector ASV system Result Analyze The Result show wav2vec pretrain Speech feature. See Yang Zhang’s Chinese Blog for more detail. Contrastive Learning for ASV Contrastive learning has recently shown encouraging progress in Self-Supervised Learning, e.g., in Momentum Contrast (MoCo) and SimCLR.","categories":[],"tags":[]},{"title":"Self-Supervised Pretrain Speech Representation for Speaker Recongnition","slug":"research_note/014_self","date":"1999-12-31T16:00:00.000Z","updated":"2020-10-23T09:17:21.559Z","comments":true,"path":"2000/01/01/research_note/014_self/","link":"","permalink":"http://yoursite.com/2000/01/01/research_note/014_self/","excerpt":"","text":"Motivation使用预训练模型提取语音声学特征从而提高当前说话人识别系统的性能。 Self-Supervised Pretrain speech representation for Speaker Recogntion The goal of speech representation learning is to find a transformation from the surface features that makes high-level properties of speech more accessible to downstream tasks. Backgroud在说话人识别任务中，第一步大多都是对语音进行声学特征提取，从语音信号中提取例如 mfcc, fbank 这样的声学特征。通过提取声学特征，一帧高维度的语音信号(waveform)可以号用一个12~40维向量简洁地表示出来；一整段语音信号，就被表示为这种向量的一个序列。例如，梅尔刻度 (Mel scale)是一种基于人耳对等距的音高(pitch)变化的感官判断而定的非线性频率刻度，它与频率关系如下: $$M(f) = 2595 \\cdot log_{10}(1+\\frac{f}{700})$$ MFCC 的性能表现可能会受到如下因素的影响: the number of filters the shape of filters the way that filters are spaced the way that the power spectrum is warped 这些传统的声学特征是根据人耳的感知机理，例如掩蔽效应，人为设计的特征提取方法。这类方法可能并不适用于计算机的模式识别，使用传统的声学特征用于说话人识别可能存在一定的不合理性。例如: 声学特征提取过程中可能会存在一定的信息损失，导致识别性能降低。 声学特征参数的选取往往依赖于人的经验。不同的参数设置，会导致不同的系统识别的性能。 提取特征的过程中可能没有考虑人说话的上下文 context 信息。 What is self-supervised learning?最近，self-supervised learning 逐渐成为科研工作者们的关注重点。self-supervised learning 是无监督学习里的一类方法，主要是希望能够学习到一种通用的特征表达用于下游任务 Yann LeCun in AAAI2020 in self-supervised learning, the systerm learns to predict part of its input from other parts of it input. Goal: Learning to represent the world before learning tasks. Predict any part of the input from any other part Predict the future from the recent past Predict the past from the present Predict the top from the bottom 什么是一个好的 Representation ? high-performing on a diverse set of downstream tasks using simple models useful in transfer learning with small amounts of data for a new task 自监督学习已经在 CV 和 NLP 领域取得了极大的成功，以大名鼎鼎的 BERT 模型为例，它利用大规模无标注语料训练、获得文本的包含丰富语义信息的 Representation，然后将文本的语义表示在特定 NLP 任务中作微调后应用于该任务上。 目前self-supervised learning的主要有如下方法： 在 speech 领域，也有很多大佬进行了一系列的探索。从 interspeech2020 和 ICML2020 两个学术会议中，我们可以看出未来应该会有更多的大佬加入 self supervised learning 在 speech 领域的研究。 Interspeech2020 Special Session: New Trends in self-supervised speech processing ICML2020: Self-supervision in Audio and Speech Contrastive Predictive CodingContrastive Predictive Coding (CPC) 是由 Google DeepMind 出品的非常有代表性的自监督学习方法，可以用于语音、图片、文本以及强化学习。CPC的主要思想就是基于 context 信息的未来数据预测，以及通过采样的方式进行训练。 CPC 的出发点是最大化context vector $c$ 和数据输入 $x$ 之间的互信息（Mutual Information），使得 $c$ 包含足够的原始数据信息，因而可以作为新的特征表示。互信息定义如下： $$MI(x;c) = \\sum_{x,c}p(x,c)log\\frac{p(x|c)}{p(x)}$$ “对比学习”中的“对比”是 positive 样本 和 negative 样本的对比。在学习到的“表示空间”内，增大某样本与其 positive 样本之间的相似度，减少与negative 样本的相似度。CPC 目标是学习一个 encoder $f$ $$\\textrm{score}(f(x),f(x^{+})) &gt;&gt; \\textrm{score}(f(x), f(x^{-}))$$ score 函数是相似度的度量，例如可以设置为 $\\textrm{score}(a, b) = a^Tb$。一般在一个训练批量的 $N$ 个样本中，使用 1 个 positive 样本和 $N-1$ 个 negative 样本。 如果大量无监督但数据采样训练，最大化互信息，我们可以得到数据新的表征。非常值得一提的是，论文中对不同说话人表征在 $t-SNE$ 可视化图中展现出了不错的区分性。 WAV2VEC依据 CPC 论文的思路，FaceBook FAIR 团队提出了 wav2vec 模型利用大量未标记的音频数据预训练的方法用于提高 ASR 系统的性能。预训练模型是在 Fairseq 工具包中的 PyTorch 中实现的。 模型由两个卷积神经网络组成: Encoder Network $x \\rightarrow z$ : embeds the audio signal in a latent space Context Network $z \\rightarrow c$ : combines multiple time-steps of the encoder to obtain contextualized representations 与 CPC 原论文里略有不同的是，在 Context Network 上，wav2vec 采用的是卷积神经网络，而 CPC 采用的 Autoregressive Model 自回归模型，因此在 infer 的速度上 wav2vec 会更快。 预训练结束后，将上下文网络 $c_i$ 生成的表示形式作为声学特征输入，而不是使用 log-mel 滤波器组特征。 Self-Supervised Feature for Speaker Recongnition我想使用 self supervised learning 的方法改进当前说话人识别系统。创新点在于利用了大量无说话人 label 的语音数据去提高当前说话人识别系统的性能 首先通过大量没有任何标注的语音数据，依据语音时序上的上下文 context 信息，使用神经网络去重新学一个更加合理 speech 的 representation。这类 self-supervised features 对语音信号前后关系有更好地建模。可以对于说话人长时性描述更强。之后我们通过预训练好的模型，对语音进行特征提取，新的声学特征将取代 mfcc 和 fbank 这类传统的声学特征，作为说话人模型对输入。我们利用这种新的特征，和传统 i-vector 和 x-vector 表征学习相互结合。 总结来说就是使用预训练模型提取语音声学特征取代 mfcc 和 fbank 从而提高当前说话人识别系统的性能。预期可能取得如下结果: 进一步提高当前的说话人识别系统的性能，成为新的STOA。 说话人训练数据在 low resources 的情况下取得更好的性能。例如 self supervised feature＋100个spk数据集训练出来的模型性能约等于甚至好于 mfcc＋500个spk数据集训练出的模型。 降低当前说话人识别模型的参数量，即 x-vector 模型的网络结构不需要很深很复杂也可以达到不错的说话人识别效果。 进一步提高当前 anti-spoofing 系统的性能。 My ExperimentToolkits我的实验主要使用了如下两个工具: fairseq: 它是一个由 facebook AI research 团队维护的 seq2seq 模型工具包，wav2vec 是 fairseq 内的一个子项目，其中同时开源了相关的一些预训练模型 Kaldi: 它是一个主要由 Danney Povey 等人主要维护的语音工具包，其中包含了经典的说话人识别模型 (i-vector, x-vector等) 的全部 pipline 代码 Dataset &amp; Configs为了快速验证这个想法，我在一个含有100个说话人的小规模的命令词数据集上，分别使用了几个不同的声学特征提取方法进行了3组实验。我们使用80个说话人进行说话人模型的训练，另外20个人用于测试。具体配置如下： Group 1: Average Pooling baseline MFCC average: MFCC feature with average pooling wav2vec c average: wav2vec pretrain feature c with average pooling wav2vec z average: wav2vec pretrain feature z with average pooling Group 2: i-vector baseline MFCC i-vector: MFCC feature with i-vector ASV system wav2vec c i-vector: wav2vec pretrain feature c with i-vector ASV system wav2vec z i-vector: wav2vec pretrain feature z with i-vector ASV system Group 3: x-vector baseline MFCC x-vector: MFCC feature with x-vector ASV system wav2vec c x-vector: wav2vec pretrain feature c with x-vector ASV system wav2vec z x-vector: wav2vec pretrain feature z with x-vector ASV system ResultGroup 1: Average Pooling Equel Error Rate MFCC average wav2vec c average wav2vec z average cosine 24.59 % 33.52 % 27.51 % PLDA 11.68 % 8.697 % 5.92 % LDA PLDA 13.25 % 8.614 % 5.981 % Group 2: i-vector Equel Error Rate MFCC i-vector wav2vec c i-vector wav2vec z i-vector cosine 19.2 % 22.23 % PLDA 10.45 % 10.35 % LDA PLDA 9.972 % 10.4 % Group 3: x-vector Equel Error Rate MFCC x-vector wav2vec c x-vector wav2vec z x-vector cosine 12.23 % 17.32 % 11.71 % PLDA 12.04 % 15.53 % 8.926 % LDA PLDA 11.48 % 11.71 % 8.784 % T-SNE Future Work Dataset: VoxCeleb dataset Dataset: VAD &amp; Data Arguement Pretrain: center loss for pretrain Pretrain: triplet loss for pretrain Related ResearchSpeech Pretrain Papers [Facebook] wav2vec: Unsupervised Pre-Training for Speech Recognition, 2019 [Google] Towards Learning a Universal Non-Semantic Representation of Speech, 2020 [DeepMind] Representation Learning with Contrastive Predictive Coding, 2019 [MIT] An Unsupervised Autoregressive Model for Speech Representation Learning, 2019 [Amazon] Deep Contextualized Acoustic Representations for Semi-Supervised Speech Recognition, 2020 [NTU] MOCKINGJAY: Unsupervised Speech Representation Learning with Deep Bidirectional Transformer Encoders, 2020 Speaker Related Papers [Yoshua Bengio] Learning Speaker Representations with Mutual Information, 2018 [Google] Towards Learning a Universal Non-Semantic Representation of Speech, 2020 [MIT] An Unsupervised Autoregressive Model for Speech Representation Learning, 2019 Pretrain Related Toolkits &amp; Code [FaceBook] fairseq [Amazon] speech-representations [NTU] MOCKINGJAY [Google] non semantic speech benchmark Reference ankeshanand Contrative SSL blog Interspeech2020 Special Session: New Trends in self-supervised speech processing ICML2020: Self-supervision in Audio and Speech","categories":[],"tags":[]},{"title":"自动驾驶产业的“社会-技术”系统构建与转型","slug":"2020/000_homework","date":"1999-12-31T16:00:00.000Z","updated":"2020-12-24T15:47:24.573Z","comments":true,"path":"2000/01/01/2020/000_homework/","link":"","permalink":"http://yoursite.com/2000/01/01/2020/000_homework/","excerpt":"","text":"摘 要： 《中国制造2025》报告中明确指出，智能网联汽车是我国将要重点发展的新兴事物之一，它与传统汽车最大的区别在于它运用了AI技术，有着人工智能的加持。随着人工智能的不断发展和低时延高带宽5G网络的普及，自动驾驶在未来必将迎来新的发展。然而整个社会交通的智能化、自动驾驶化整个过程并不是一蹴而就的，需要长时间的不断构建、迭代和转型。因此我结合本门课程所学的“社会—技术”系统分析的相关知识，并结合自己的理解对当前的自动驾驶产业发展进行分析和进一步的深入解读，并提出了自己对这个产业未来发展的看法。 当前自动驾驶产业发展概况在计算机科学和信息产业不断蓬勃发展的今天，AI 技术加持的自动驾驶汽车技术在缓解交通拥堵、减少交通事故、提高道路及车辆利用率等方面有具大的潜力，并已成为众多企业单位乃至国家的关注重点。《中国制造2025》将智能网联汽车归类为十大“大力推送重点领域突破发展”之一。 与此同时，机器学习的发展深刻的改变了人类的方方面面。谷歌Google Brian部门负责人 Jeff Dean 曾说到：“深度神经网络显著提升了计算机感知世界的能力，它不仅改变了计算领域，也几乎改变了科学和人类奋斗的其他所有领域”。自20世纪80年代以来，机器学习作为实现人工智能的途径，得到了长足的发展和进步，而近十年来机器学习领域中一个新的研究方向，深度学习，越来越受到人们的关注。深度学习的引入，让机器能够像人一样具有分析学习能力，使其能够更加接近人工智能这个目标。 在自动驾驶领域，深度学习技术使得计算机能够从海量数据去发现和学习，从而在更加复杂的环境下，模拟人类的决策，去自主的控制汽车的行驶，下图是自动驾驶的决策流程图： 根据自动驾驶能力对不同，美国汽车工程师协会（SAE）在2014年制订的自动驾驶分级标准，由下图所示，自动驾驶可分为L0-L5共六级： 自动驾驶如今已从早期的学术探索已经快速转向应用产品的落地，谷歌、腾讯、百度等大型互联网企业都先后加大了对于智能网联汽车研究的投入。随着人工智能的不断发展和低时延高带宽5G网络的普及，自动驾驶在未来必将迎来新的发展。 “社会—技术”系统发展历史与概念简介自动驾驶能够逐步的把驾驶员从需要时刻集中注意力的驾驶中解放出来，从而逐步取代传统的人工驾驶。然而整个社会交通的智能化、自动驾驶化整个过程并不是一蹴而就的，需要长时间的不断构建、迭代和转型。因此我结合本门课程所学的“社会-技术”系统的相关知识，并结合自己的理解对当前的自动驾驶产业发展进行分析和进一步的解读。 在社会发展过程中，人们对于技术本身是否具有价值属性却存在很大争议。所以根据技术本身和对技术的应用，把技术的价值分为了技术本身价值和技术实现价值。随着社会的进步与技术的发展，人们关于技术的价值认识也逐渐发生着变化，出现了多种不同的观点。在过去，主流观点认为技术只是一个工具，不承载任何的价值，即“技术工具论”。随后随着社会的发展，“技术价值论”逐渐走进了人们视野，这类观点认为，技术本身是具有价值的。值得注意的是，以马克思为代表的哲学家认为技术绝对不是独立于社会而单独存在的，技术本身承载的价值与社会的大部分主体所需要的价是相一致的，由此提出了“社会构建论”。 在二战结束后，来自英国塔维斯托克研究所的 E.L.Trist 教授团队通过对英国煤矿中长壁采煤法生产问题的研究发现：许多矛盾的产生是由于人们只把组织看成一个社会系统，而没有看到它同时又是一个技术系统。然而，个人态度和群体行为都受到人们在其中工作的技术系统的重大影响。因此，他们认为，人们必须把企业中的社会系统同技术系统结合起来考虑，而管理者的一项主要任务就是要确保这两个系统相互协调。由此提出了社会技术系统学派。 在此基础上，荷兰特文特大学大学教授Frank W. Geels于2004年提出用于描述行业创新的“社会—技术”系统。他认为，人们在过去在对产品或是技术创新系统的描述中，都只侧重于技术供给端的创新网络的分析，然而对技术需求端参与主体关注度不够。但是技术创新的目标是为了实现社会的某些功能、满足人们的需求。为此作者首次对行业创新下的“社会—技术”系统进行了分析和研究，他认为创新系统不仅包括产品生产，也包含产品使用参与的主体。Geels教授认为，一个成熟的社会技术系统由如下3个方面构成： 系统应包含完整的社会参与主体、 系统应包含完善的制度系统，不只是包含各群体内部的规则制度，还应包括各类群体之间的交往规则制度 这个系统应是实现社会某一功能的主导技术系统，例如汽车是实现城市陆地交通运输职能的主导社会技术系统。 这个系统在之后的企业管理和社会分析等领域有着广泛的影响力，成为了分析技术产业帮助人们做管理决策的主流思想和方法。 自动驾驶产业的社会技术系统分析基于上述社会技术系统的概念和分析方法，我们可以构建一个自动驾驶产业的社会技术系统，可大致主要分为三个主要的部分： 自动驾驶车辆的生产端（即自动驾驶车辆的制造厂商） 自动驾驶车辆的使用端（即自动驾驶车辆的用户车主） 公共政府和有关的监管部门 通过“社会—技术”系统的分析我们不难发现，自动驾驶产业技术还处于发展的初步阶段，社会技术系统还不成熟，未来还有很长的路要走。具体分析如下： 在自动驾驶车辆生产端，算法技术是整个自动驾驶行业的核心，尽管大学和科研机构和车企紧密合作，但是自动驾驶的核心算法技术尚不成熟。相关的行业和标准制定机构已经对自动驾驶的行业标准进行了规范，但是目前仍然存在很多不足。例如自动驾驶的智能感知到底是采用传统的摄像机和图片识别的技术还是采用激光雷达技术目前还没有统一定论，但可以确定的是这些方案的安全性的测试标准还没有统一，个大厂商依然还在进行着实地路测试。同时值得注意的是，当前的自动驾驶当前的主流厂商过多的都集中关注汽车零部件和算法的设计，然而对训练模型数据所需的实地路测数据关注不够高，同时对自动驾驶可能引发的安全伦理问题没用很好的解决方案。 在自动驾驶车辆的使用端，公共政府部门出台大量优惠政策大力反转自动驾驶，但主流的媒体依旧对自动驾驶的安全性保持着怀疑的态度。以特斯拉自动辅助驾驶系统为例，一方面网络大量宣传特斯拉自动驾驶的先进性和科技感，引导了车主的偏好和选择，但在另外一方面，对于特斯拉辅助驾驶时的事故保持着很大的担忧，也影响着自动驾驶汽车的销量。同时对于自动驾驶交通事故的责任认定，在产品的使用端也可能会造成很大的疑虑和怀疑，影响着整个自动驾驶行业的发展。 我对自动驾驶产业发展的看法回顾美国电气化的所走过历程，我们可以看到，美国的电力系统的发展是一个循序渐进的演变过程，首先由著名的发明大王爱迪生（Edision）在实验室内研发出了高阻抗、耐用的的灯丝，在技术上满足了商业的的技术需求。随后由Insull等人创建了芝加哥电力公司，通过集中整合供应链系统解决了交流电和直流电新旧技术的兼容问题，促进了电力的产业化。最后由Mitchell等人通过成立控股公司，尝试组织变革，解决了小企业的发展困境，推动了整个电力产业的扩张。最终这三人才成功缔造了如今美国现代化的电气系统，从而引发了整个世界电气产业的革命。 由此，我们不难得出这样的结论：一个新的“社会—技术”系统形成需要满足三个必要条件，分别是愿景（Vision）、网络构建（Networking building）还有学习（Learning）。 当前自动驾驶的发展瓶颈不只在于技术上存在难题，自动驾驶技术的发展带来的伦理问题也不容忽视。例如在发生不可避免的汽车碰撞中，自动驾驶程序如何选择前进方向或选择碰撞的目标？自动驾驶技术可能会带来事故责任认定存在很大争议的问题。 “罗马不是一天建成的”，尽管以深度学习为代表的人工智能技术如今蓬勃发展，改变了很多产业的面貌，但是对于自动驾驶这个涉及到公共交通安全的产业，还有很多的路要走。当前很多公司过多的关注于自动驾驶技术的研发，但是我认为整个社会交通的智能化、自动驾驶化整个过程并不是一蹴而就的，需要长时间的不断构建、迭代和转型。因此自动驾驶技术还有很长的路要走，当前还处于萌芽阶段。 但自动驾驶一定是未来的时代发展潮流，在未来必定会深刻的改变公共交通行业的面貌。 参考文献[1] 金博, 胡延明. C-V2X 车联网产业发展综述与展望[J]. 电信科学, 36(3): 93-99. [2] 王金强, 黄航, 郅朋, 等. 自动驾驶发展与关键技术综述[J]. 电子技术应用, 2019, 45(6): 28-36. [3] 王燕妮. 新能源汽车社会技术系统发展分析[J]. 中国科技论坛, 2017, 000(001):69-75. [4] 杨文亚. 杭州市电动汽车社会技术系统创新和政策研究[D]. 2014.","categories":[],"tags":[]}],"categories":[{"name":"统计","slug":"统计","permalink":"http://yoursite.com/categories/%E7%BB%9F%E8%AE%A1/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/categories/Git/"},{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/categories/Tips/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"toolkit","slug":"toolkit","permalink":"http://yoursite.com/categories/toolkit/"},{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"},{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/categories/WEB/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"},{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"offer","slug":"offer","permalink":"http://yoursite.com/categories/offer/"},{"name":"flows","slug":"flows","permalink":"http://yoursite.com/categories/flows/"},{"name":"backends","slug":"backends","permalink":"http://yoursite.com/categories/backends/"},{"name":"板子","slug":"板子","permalink":"http://yoursite.com/categories/%E6%9D%BF%E5%AD%90/"}],"tags":[{"name":"统计","slug":"统计","permalink":"http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"},{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"开发","slug":"开发","permalink":"http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/%E6%95%88%E7%8E%87/"},{"name":"毕业要紧","slug":"毕业要紧","permalink":"http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%A6%81%E7%B4%A7/"},{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"WEB","slug":"WEB","permalink":"http://yoursite.com/tags/WEB/"},{"name":"Kaldi","slug":"Kaldi","permalink":"http://yoursite.com/tags/Kaldi/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"Linix","slug":"Linix","permalink":"http://yoursite.com/tags/Linix/"},{"name":"概率论与线性代数","slug":"概率论与线性代数","permalink":"http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"线性代数","slug":"线性代数","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"概率论","slug":"概率论","permalink":"http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"},{"name":"Pytorch","slug":"Pytorch","permalink":"http://yoursite.com/tags/Pytorch/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"板子","slug":"板子","permalink":"http://yoursite.com/tags/%E6%9D%BF%E5%AD%90/"},{"name":"神经网络","slug":"神经网络","permalink":"http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"生成式模型","slug":"生成式模型","permalink":"http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%BC%8F%E6%A8%A1%E5%9E%8B/"},{"name":"优化器","slug":"优化器","permalink":"http://yoursite.com/tags/%E4%BC%98%E5%8C%96%E5%99%A8/"},{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"}]}